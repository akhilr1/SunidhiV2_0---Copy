using System;
using System.Collections.Generic;
using System.Linq;
using SunidhiV2_0.Models;
using SunidhiV2_0.Code.Common;
using System.Data;
using Dapper;
using Newtonsoft.Json;

namespace SunidhiV2_0.Code.DAL
{
    public class ProjectActivityDAL
    {
        protected IDbConnection _connection;

        #region ManageProjectActivity

        /// <summary>
        /// Used to fetch project activity details based on projectID
        /// </summary>
        /// <param name="projectID"></param>
        /// <param name="multS"></param>
        /// <returns></returns>
        public List<ProjectActivity> GetProjectActivityList(int projectID, bool multS)
        {
            List<ProjectActivity> objProjectActivityList = new List<ProjectActivity>();
            List<ProjectActivity> objProjectActivityListNew = new List<ProjectActivity>();
            string query = string.Empty;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = @"select ProjectActivity.ActivityId,ProjectActivity.ProjectId,ParentActivityId,ProjectActivity.ActivityName,ProjectActivity.Description,ProjectActivity.StartDate,ProjectActivity.EndDate
                                ,ProjectActivity.WeightagePercentage,ProjectActivity.ActivityType,ProjectActivity.SurveyId,ProjectActivity.SurveySectionId,BeneficiaryTypeQuestionID,
                                ProjectActivity.SurveyQuestionId,ProjectActivity.SurveyResponseId,ProjectActivity.SurveyLogic,ProjectActivity.SurveyTarget,ProjectActivity.IsPaymentLinked,ProjectActivity.PaymentLinkedBudget,
                                ProjectActivity.WorkflowId,ProjectActivity.FinanceWorkflowId,ProjectActivity.Periodicity,ProjectActivity.IsDeleted,ProjectActivity.CreatedDate,ProjectActivity.UpdatedDate,ProjectActivity.CreatedBy,ProjectActivity.UpdatedBy
                                ,TbPeriodicity.PeriodicityType as ReportingFrequencyName,ProjectActivity.Progress,@multS as multS,ProjectSurvey.BeneficiaryTypeID as BeneficiaryTypeID,
                                (SELECT COUNT(*) FROM TbProjectActivity WHERE ParentActivityId = ProjectActivity.ActivityId) SubActivityCount  ,
                                (SELECT SUM(WeightagePercentage) FROM  TbProjectActivity WHERE ParentActivityId = ProjectActivity.ActivityId AND IFNULL(IsDeleted,0) = 0) SubActivityTotalWeightage,ProjectActivity.AdditionalQuestionId as AdditionalSurveyQuestionId 
                                ,ProjectActivity.AdditionalQuestionType, ProjectActivity.AdditionalQuestionId, ifnull(ProjectActivity.AdditionalSectionId,0) as AdditionalSectionId, ProjectActivity.AutoGeneratedActivityId, ProjectActivity.IsSubActivitiesAvailable, ProjectActivity.UnitOfMeasure,
                                IFNULL(ProjectActivity.FinancialActivityType,'') AS FinancialActivityType,ifnull(ProjectActivity.FinancialSurveyLogic,0) as FinancialSurveyLogic,ifnull(ProjectActivity.FinancialSurveyTarget,0) as FinancialSurveyTarget,ifnull(ProjectActivity.FinancialAdditionalSurveyId,0) as FinancialAdditionalSurveyId,
                                ifnull(ProjectActivity.FinancialAdditionalSectionId,0) as FinancialAdditionalSectionId,ifnull(ProjectActivity.FinancialAdditionalQuestionId,0) as FinancialAdditionalQuestionId,ifnull(ProjectActivity.FinancialAdditionalQuestionType,0) as FinancialAdditionalQuestionType,ifnull(ProjectActivity.UnitCost,0) as UnitCost   
                                from TbProjectActivity ProjectActivity left join TbProjectSurvey ProjectSurvey on ProjectSurvey.SurveyID = ProjectActivity.SurveyId left join TbPeriodicity TbPeriodicity 
                                on TbPeriodicity.PeriodicityId = ProjectActivity.Periodicity where ProjectActivity.IsDeleted = @isdeleted and ProjectActivity.ProjectId = @projid  Order By ParentActivityId asc,ProjectActivity.ActivityId Desc;";

                    objProjectActivityList = _connection.Query<ProjectActivity>(query, new { isdeleted = 0, projid = projectID, multS = multS }).ToList();

                    foreach (ProjectActivity actItem in objProjectActivityList)
                    {
                        //Get all SubActivities of this parent to one sub-level

                        if (actItem.ActivityType == "Quantitative")
                        {
                            if (actItem.SubActivityCount == 0)
                            {
                                double result = getData(actItem.ActivityId, actItem.SurveyLogic, actItem.SurveyTarget,Convert.ToInt32(actItem.AdditionalSectionId), actItem.AdditionalSurveyQuestionId, actItem.AdditionalQuestionType,1);
                                actItem.PhysicalActualValue = result;
                                actItem.doubleProgress = result / Convert.ToDouble(actItem.SurveyTarget);//(int)Math.Round(result * actItem.WeightagePercentage);
                                int totPercentage = (int)Math.Round((result * 100) / Convert.ToDouble(actItem.SurveyTarget));
                                actItem.Progress = (totPercentage > 100 ? 100 : totPercentage);
                            }

                            actItem.OutPutQuantitativeLogic = new List<OutPutQuantitativeLogic>();
                            actItem.OutPutQuantitativeLogic = GetQuantitativeData(actItem.ActivityId);
                        }

                        actItem.lstProjectActivityMonthwiseData = new List<ProjectActivityMonthwiseData>();
                        actItem.lstProjectActivityMonthwiseData = GetProjectActivityMonthwiseData(actItem.ActivityId);

                        // actItem.children = GetSubActivityListByID(actItem.ActivityId);

                        actItem.ActivityUsers = new List<User>();

                        query = @"select distinct t.ID,Name, t.EmailId, t.Phone, t.Password, t.IsActive, t.NoOfLogins, t.FailedLoginCount,t.UserType,
                                    IFNULL(t.ProfileImage, '') as ProfileImage ,Organization from TbUser t inner join 
                                    TbProjectActivityToUsers u on u.UserId = t.ID and u.IsDeleted <>1 and u.ActivityId= @actid Order By t.ID Desc";

                        actItem.ActivityUsers = _connection.Query<User>(query, new { actid = actItem.ActivityId }).ToList();

                        //Get Expense tag List
                        actItem.ExpenseTags = new List<Tags>();

                        query = @"select distinct t.TagID,t.TagName from TbProjectExpenseTags t inner join TbProjectActivityToExpenseTags e where e.ExpenseTagID = t.TagID
                                  and e.IsDeleted <>1 and e.ActivityId=@actid Order By t.TagID Desc";

                        actItem.ExpenseTags = _connection.Query<Tags>(query, new { actid = actItem.ActivityId }).ToList();

                        //Get Activity tag List
                        actItem.ActivityTags = new List<Tags>();

                        query = @"select distinct t.TagID,t.TagName,t.TagColor from TbProjectTags t inner join TbProjectActivityToTags p where p.ActivityTagID = t.TagID and p.IsDeleted <>1 and 
                                     p.ActivityId=@actid Order By t.TagID Desc";

                        actItem.ActivityTags = _connection.Query<Tags>(query, new { actid = actItem.ActivityId }).ToList();

                        //Get Periodicity parameters
                        DateTime? RptDate = null;
                        dynamic obj;
                        string strQeury = @"SELECT TrackDate FROM TbProjectActivityTrackDate WHERE ActivityId = @actid order by ID LIMIT 1";
                        obj = _connection.Query<object>(strQeury, new { actid = actItem.ActivityId }).FirstOrDefault();

                        if (obj != null)
                        {
                            RptDate = obj.TrackDate;
                        }

                        if (RptDate != null)
                        {
                            switch (actItem.Periodicity)
                            {
                                case (int)CommonActivity.ReportingFrequency.Once:
                                    actItem.PeriodicityOnceDate = RptDate.Value;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Weekly:
                                    actItem.PeriodicityWeek = (int)RptDate.Value.DayOfWeek;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Monthly:
                                    actItem.PeriodicityMonthDay = RptDate.Value.Day;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Quarterly:
                                    actItem.PeriodicityMonthDateDay = RptDate.Value.Day;
                                    actItem.PeriodicityMonth = RptDate.Value.Month;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Half_Yearly:
                                    actItem.PeriodicityMonthDateDay = RptDate.Value.Day;
                                    actItem.PeriodicityMonth = RptDate.Value.Month;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Yearly:
                                    actItem.PeriodicityMonthDateDay = RptDate.Value.Day;
                                    actItem.PeriodicityMonth = RptDate.Value.Month;
                                    break;
                            }
                        }
                    }

                    //List<ProjectActivity> lstProjectActivityList1 = new List<ProjectActivity>();
                    //lstProjectActivityList1 = objProjectActivityList.Where(x => x.SubActivityCount > 0).ToList();

                    //if (lstProjectActivityList1 != null && lstProjectActivityList1.Count > 0)
                    //{
                    //    foreach(var itm  in lstProjectActivityList1)
                    //    {

                    //    }
                    //}

                    List<ProjectActivity> lstProjectActivity = new List<ProjectActivity>();

                    query = @"WITH RECURSIVE cte (ActivityId, ParentActivityId, activityname, level) AS
                                (
                                  select  ActivityId
                                        ,       ParentActivityId, activityname 
		                                ,		1 as 'level'
                                        from    TbProjectActivity t1
                                        where   t1.ProjectId= @ProjectId and ParentActivityId > 0
                                  UNION ALL
                                  select  child.ActivityId
                                        ,       child.ParentActivityId
                                        ,       child.activityname
                                        ,       level + 1 as 'level'
                                        from    TbProjectActivity child
                                        join cte 
                                        on      child.ParentActivityId = cte.ActivityId
		
                                )
                                SELECT max(ActivityId) ActivityId,max(ParentActivityId) ParentActivityId,max(activityname) ActivityName,max(level) Level FROM cte group by ActivityId; ";

                    lstProjectActivity = _connection.Query<ProjectActivity>(query, new { ProjectId = projectID }).ToList();

                    if (lstProjectActivity != null && lstProjectActivity.Count > 0)
                    {
                        var item = lstProjectActivity.Max(x => x.Level);

                        for (int i = item; i > 0; i--)
                        {
                            double parentPercentage = 0;
                            double parentWeightage = 0;
                            List<ProjectActivity> lstProjectActivity1 = new List<ProjectActivity>();
                            lstProjectActivity1 = lstProjectActivity.Where(x => x.Level == i).ToList();

                            if (lstProjectActivity1 != null && lstProjectActivity1.Count > 0)
                            {
                                List<ProjectActivity> distinctPeople = lstProjectActivity1.GroupBy(p => p.ParentActivityId).Select(g => g.First()).ToList();

                                foreach (var itm3 in distinctPeople)
                                {
                                    parentWeightage = 0;
                                    int childLevel = 0;
                                    int parentID = itm3.ParentActivityId;
                                    List<ProjectActivity> lstProjectActivity2 = new List<ProjectActivity>();
                                    lstProjectActivity2 = objProjectActivityList.Where(x => x.ParentActivityId == parentID).ToList();

                                    if (lstProjectActivity2 != null && lstProjectActivity2.Count > 0)
                                    {
                                        int count = 0;
                                        double sum = 0;
                                        double allsum = 0;
                                        foreach (var itm2 in lstProjectActivity2)
                                        {
                                            sum += itm2.doubleProgress * itm2.WeightagePercentage;
                                            allsum += itm2.WeightagePercentage;
                                            parentWeightage += itm2.WeightagePercentage;
                                            count++;
                                        }
                                        parentPercentage = sum / allsum;
                                        childLevel = 1;
                                    }
                                    else
                                    {
                                        childLevel = 0;
                                    }

                                    foreach (var tom in objProjectActivityList.Where(w => w.ActivityId == parentID))
                                    {
                                        tom.Progress = (int)Math.Round(parentPercentage * 100);
                                        tom.doubleProgress = parentPercentage;

                                        if (childLevel > 0)
                                        {
                                            tom.WeightagePercentage = parentWeightage;
                                        }
                                    }


                                    ProjectActivity objProjectActivityList1 = new ProjectActivity();
                                    objProjectActivityList1 = objProjectActivityList.Where(x => x.ActivityId == itm3.ParentActivityId).FirstOrDefault();

                                    if (objProjectActivityList1 != null)
                                    {
                                        objProjectActivityList1.children = new List<ProjectActivity>();

                                        foreach (var itm2 in lstProjectActivity2)
                                        {
                                            if (objProjectActivityListNew != null && objProjectActivityListNew.Count > 0)
                                            {
                                                objProjectActivityListNew.RemoveAll(r => r.ActivityId == itm2.ActivityId);
                                            }

                                            objProjectActivityList1.children.Add(itm2);
                                        }
                                    }

                                    if (objProjectActivityList1 != null)
                                    {
                                        objProjectActivityListNew.Add(objProjectActivityList1);
                                    }
                                }
                            }
                        }

                        var item2 = lstProjectActivity.Where(x => x.Level == 1).ToList();

                        List<ProjectActivity> distinctPeople1 = item2.GroupBy(p => p.ParentActivityId).Select(g => g.First()).ToList();

                        foreach (var itm3 in distinctPeople1)
                        {
                            double parentPercentage = 0;
                            double parentWeightage = 0;
                            int childLevel = 0;
                            int parentID = itm3.ParentActivityId;
                            List<ProjectActivity> lstProjectActivity2 = new List<ProjectActivity>();
                            lstProjectActivity2 = objProjectActivityList.Where(x => x.ParentActivityId == parentID).ToList();

                            if (lstProjectActivity2 != null && lstProjectActivity2.Count > 0)
                            {
                                int count = 0;
                                double sum = 0;
                                double allsum = 0;
                                foreach (var itm2 in lstProjectActivity2)
                                {
                                    sum += itm2.doubleProgress * itm2.WeightagePercentage;
                                    allsum += itm2.WeightagePercentage;
                                    parentWeightage += itm2.WeightagePercentage;
                                    count++;
                                }
                                parentPercentage = sum / allsum;
                                childLevel = 1;
                            }
                            else
                            {
                                childLevel = 0;
                            }

                            foreach (var tom in objProjectActivityListNew.Where(w => w.ActivityId == parentID))
                            {
                                tom.Progress = (int)Math.Round(parentPercentage * 100);
                                tom.doubleProgress = parentPercentage;

                                if (childLevel > 0)
                                {
                                    tom.WeightagePercentage = parentWeightage;
                                }
                            }
                        }


                        List<ProjectActivity> objProjectActivityList2 = new List<ProjectActivity>();
                        objProjectActivityList2 = objProjectActivityList.Where(x => x.ParentActivityId == 0 && x.SubActivityCount == 0).ToList();

                        if (objProjectActivityList2 != null && objProjectActivityList2.Count > 0)
                        {
                            foreach (var itm4 in objProjectActivityList2)
                            {
                                objProjectActivityListNew.Add(itm4);
                            }
                        }
                    }
                    else
                    {
                        foreach (var itm2 in objProjectActivityList)
                        {
                            objProjectActivityListNew.Add(itm2);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            if (objProjectActivityListNew != null && objProjectActivityListNew.Count > 0)
            {
                objProjectActivityListNew = objProjectActivityListNew.OrderByDescending(s => s.ActivityId).ToList();
            }
            //var objProjectActivityList1 = objProjectActivityList.OrderByDescending(s => s.ActivityId).OrderBy(s => s.ParentActivityId);

            return objProjectActivityListNew;
        }

        /// <summary>
        /// Used to fetch sub activity details based on activityID
        /// </summary>
        /// <param name="activityID"></param>
        /// <returns></returns>
        public List<ProjectActivity> GetSubActivityListByID(int activityID)
        {
            List<ProjectActivity> objSubProjectActivityList = new List<ProjectActivity>();
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = @"select ActivityId,ProjectId,ParentActivityId,ActivityName,Description,StartDate,EndDate,WeightagePercentage,ActivityType,SurveyId,SurveySectionId,SurveyQuestionId,BeneficiaryTypeQuestionID
                            ,SurveyResponseId,SurveyLogic,SurveyTarget,IsPaymentLinked,PaymentLinkedBudget,WorkflowId,FinanceWorkflowId,Periodicity,IsDeleted,CreatedDate,UpdatedDate,CreatedBy,UpdatedBy,Progress from TbProjectActivity where IsDeleted=@isdeleted and ParentActivityId=@parentactid Order By ActivityId Desc";
                    objSubProjectActivityList = _connection.Query<ProjectActivity>(query, new { isdeleted = 0, parentactid = activityID }).ToList();

                    foreach (ProjectActivity actItem in objSubProjectActivityList)
                    {
                        //Get Users List
                        actItem.ActivityUsers = new List<User>();

                        query = @"select distinct t.ID,t.Name,t.EmailId,t.Phone,t.Password,t.IsActive,t.NoOfLogins,t.FailedLoginCount,t.UserType,IFNULL(t.ProfileImage, '') as ProfileImage
                                ,t.Organization from TbUser t inner join TbProjectActivityToUsers u where u.UserId = t.ID and u.IsDeleted <>1 and u.ActivityId= @actid Order By t.ID Desc";

                        actItem.ActivityUsers = _connection.Query<User>(query, new { actid = actItem.ActivityId }).ToList();

                        //Get Expense tag List
                        actItem.ExpenseTags = new List<Tags>();

                        query = @"select distinct t.TagID,t.TagName from TbProjectExpenseTags t inner join TbProjectActivityToExpenseTags e where e.ExpenseTagID = t.TagID and 
                                    e.IsDeleted <>1 and e.ActivityId=@actid Order By t.TagID Desc";

                        actItem.ExpenseTags = _connection.Query<Tags>(query, new { actid = actItem.ActivityId }).ToList();

                        //Get Activity tag List
                        actItem.ActivityTags = new List<Tags>();

                        query = @"select distinct t.TagID,t.TagName,t.TagColor from TbProjectTags t inner join TbProjectActivityToTags a where
                                    a.ActivityTagID = t.TagID and a.IsDeleted <>1 and a.ActivityId=@actid Order By t.TagID Desc";

                        actItem.ActivityTags = _connection.Query<Tags>(query, new { actid = actItem.ActivityId }).ToList();

                        //Get Periodicity parameters
                        DateTime? RptDate = null;
                        dynamic obj;
                        string strQeury = @"SELECT TrackDate FROM TbProjectActivityTrackDate WHERE ActivityId = @actid order by ID LIMIT 1";
                        obj = _connection.Query<object>(strQeury, new { actid = actItem.ActivityId }).FirstOrDefault();

                        if (obj != null)
                        {
                            RptDate = obj.TrackDate;
                        }

                        if (RptDate != null)
                        {
                            switch (actItem.Periodicity)
                            {
                                case (int)CommonActivity.ReportingFrequency.Once:
                                    actItem.PeriodicityOnceDate = RptDate.Value;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Weekly:
                                    actItem.PeriodicityWeek = (int)RptDate.Value.DayOfWeek;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Monthly:
                                    actItem.PeriodicityMonthDay = RptDate.Value.Day;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Quarterly:
                                    actItem.PeriodicityMonthDateDay = RptDate.Value.Day;
                                    actItem.PeriodicityMonth = RptDate.Value.Month;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Half_Yearly:
                                    actItem.PeriodicityMonthDateDay = RptDate.Value.Day;
                                    actItem.PeriodicityMonth = RptDate.Value.Month;
                                    break;
                                case (int)CommonActivity.ReportingFrequency.Yearly:
                                    actItem.PeriodicityMonthDateDay = RptDate.Value.Day;
                                    actItem.PeriodicityMonth = RptDate.Value.Month;
                                    break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return objSubProjectActivityList;
        }

        /// <summary>
        /// Add new activity
        /// </summary>
        /// <param name="inputObj"></param>
        /// <param name="loggedUserId"></param>
        /// <param name="activityAttchments"></param>
        /// <returns></returns>
        public int AddActivity(ProjectActivity inputObj, int loggedUserId, ActivityAttchments activityAttchments)
        {
            string strQuery = string.Empty;
            var actid = 0;
            bool retStatus = false;
            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        strQuery = @"INSERT INTO TbProjectActivity(ProjectId, ParentActivityId, ActivityName, Description, StartDate, EndDate, 
                                        WeightagePercentage, ActivityType, SurveyId,BeneficiaryTypeQuestionID, SurveySectionId, 
                                        SurveyQuestionId, SurveyResponseId, SurveyLogic, SurveyTarget, 
                                        IsPaymentLinked, PaymentLinkedBudget, WorkflowId, Periodicity, 
                                        IsDeleted, CreatedDate, CreatedBy, UpdatedDate, 
                                        AutoGeneratedActivityId, AdditionalSectionId, AdditionalQuestionId, AdditionalQuestionType,
                                        IsSubActivitiesAvailable, UnitOfMeasure,FinancialActivityType,FinancialSurveyLogic,FinancialSurveyTarget,
                                        FinancialAdditionalSurveyId,FinancialAdditionalSectionId,FinancialAdditionalQuestionId,FinancialAdditionalQuestionType,UnitCost)
                                    VALUES(@projectid,@parentactid,@actname,@desc,@startdate,@enddate,
                                        @weight,@acttype,@surveyid,@BeneficiaryTypeQuestionID,@sectionid,
                                        @quesid,@respid,@logic,@target,@ispaylink,@linkbudg,@wfid,@period,                                        
                                        @isdeleted,@createdate,@createby,@upddate, @AutoGeneratedActivityId, 
                                        @AdditionalSectionId, @AdditionalQuestionId, @AdditionalQuestionType,
                                        @IsSubActivitiesAvailable, @UnitOfMeasure,@FinancialActivityType,@FinancialSurveyLogic,@FinancialSurveyTarget,
                                        @FinancialAdditionalSurveyId,@FinancialAdditionalSectionId,@FinancialAdditionalQuestionId,@FinancialAdditionalQuestionType,@UnitCost); SELECT LAST_INSERT_ID();";
                        actid = _connection.Query<int>(strQuery, new
                        {
                            projectid = inputObj.ProjectId,
                            parentactid = inputObj.ParentActivityId,
                            actname = inputObj.ActivityName,
                            desc = inputObj.Description,
                            startdate = inputObj.StartDate,
                            enddate = inputObj.EndDate,
                            weight = inputObj.WeightagePercentage,
                            acttype = inputObj.ActivityType,
                            surveyid = (inputObj.ActivityType == "Quantitative" ? 0 : inputObj.SurveyId),
                            BeneficiaryTypeQuestionID = inputObj.BeneficiaryTypeQuestionID,
                            sectionid = (inputObj.ActivityType == "Quantitative" ? 0 : inputObj.SurveySectionId),
                            quesid = (inputObj.ActivityType == "Quantitative" ? 0 : inputObj.SurveyQuestionId),
                            respid = inputObj.SurveyResponseId,
                            logic = inputObj.SurveyLogic,
                            target = (!string.IsNullOrEmpty(inputObj.SurveyTarget) && inputObj.SurveyTarget != "null" ? inputObj.SurveyTarget : "0"),
                            ispaylink = inputObj.IsPaymentLinked,
                            linkbudg = inputObj.PaymentLinkedBudget,
                            wfid = inputObj.WorkflowId,
                            period = inputObj.Periodicity,
                            isdeleted = 0,
                            createdate = DateTime.Now,
                            createby = loggedUserId,
                            upddate = DateTime.Now,
                            inputObj.AutoGeneratedActivityId,
                            inputObj.AdditionalSectionId,
                            inputObj.AdditionalQuestionId,
                            AdditionalQuestionType = (inputObj.AdditionalQuestionId > 0 ? 1 : 0),
                            inputObj.IsSubActivitiesAvailable,
                            inputObj.UnitOfMeasure,
                            FinancialActivityType = inputObj.FinancialActivityType,
                            FinancialSurveyLogic = inputObj.FinancialSurveyLogic,
                            FinancialSurveyTarget = (!string.IsNullOrEmpty(inputObj.FinancialSurveyTarget) && inputObj.FinancialSurveyTarget != "null" ? inputObj.FinancialSurveyTarget : "0"),
                            FinancialAdditionalSurveyId = inputObj.FinancialAdditionalSurveyId,
                            FinancialAdditionalSectionId = inputObj.FinancialAdditionalSectionId,
                            FinancialAdditionalQuestionId = inputObj.FinancialAdditionalQuestionId,
                            FinancialAdditionalQuestionType = (inputObj.FinancialAdditionalQuestionId > 0 ? 1 : 0),
                            UnitCost = inputObj.UnitCost
                        }).Single();

                        if (actid > 0)
                        {
                            if (inputObj.OutPutQuantitativeLogic != null && inputObj.OutPutQuantitativeLogic.Count > 0)
                            {
                                string QueryOutCollection = @"INSERT INTO TbOutputSurveyCollection(ActivityId,SurveyId,SectionId,QuestionId,BeneficiaryQuestionID,CreatedDate,IsActive,TypeofLogic) VALUES(@ActivityId,@SurveyId,@SectionId,@QuestionId,@BeneficiaryQuestionID,now(),1,@TypeofLogic); SELECT LAST_INSERT_ID();";

                                foreach (var itm in inputObj.OutPutQuantitativeLogic)
                                {
                                    int collId = _connection.Query<int>(QueryOutCollection, new
                                    {
                                        ActivityId = actid,
                                        SurveyId = itm.SurveyId,
                                        SectionId = itm.SectionId,
                                        QuestionId = itm.QuestionId,
                                        BeneficiaryQuestionID = itm.BeneficiaryTypeQstnID,
                                        TypeofLogic = itm.TypeofLogic
                                    }).Single();

                                    if (collId > 0 && itm.lstSurveyPrimeLogic != null && itm.lstSurveyPrimeLogic.Count > 0)
                                    {
                                        string QueryOutSurveyLogic = @"INSERT INTO TbOutputSurveyLogic(SurveyCollectionID,SurveyLogic,SurveyAnswer,IsActive,CreatedDate,LogicCondition) VALUES(@SurveyCollectionID,@SurveyLogic,@SurveyAnswer,1,now(),@LogicCondition);";

                                        foreach (var itm1 in itm.lstSurveyPrimeLogic)
                                        {
                                            _connection.Execute(QueryOutSurveyLogic, new
                                            {
                                                SurveyCollectionID = collId,
                                                SurveyLogic = itm1.SurveyLogicPrime,
                                                SurveyAnswer = itm1.SurveyLogicPrimeAnswer,
                                                LogicCondition = itm1.SurveyLogicCondition
                                            });
                                        }
                                    }
                                }
                            }


                            // Activity Month wise data insertion - done on 29-01-2023
                            if (inputObj.lstProjectActivityMonthwiseData != null && inputObj.lstProjectActivityMonthwiseData.Count > 0)
                            {
                                string queryMonth = "insert into TbProjectActivityMonthwiseData(ActivityId,Target,Budget,ActMonth,ActYear,CreatedDate,IsActive) ";

                                int mntcount = 0;

                                foreach (var monthItem in inputObj.lstProjectActivityMonthwiseData)
                                {
                                    queryMonth += " select " + actid + "," + monthItem.Target + "," + monthItem.Budget + "," + monthItem.ActMonth + "," + monthItem.ActYear + ",NOW(),1";

                                    mntcount++;

                                    if (mntcount < inputObj.lstProjectActivityMonthwiseData.Count)
                                    {
                                        queryMonth += " UNION ALL ";
                                    }
                                }

                                _connection.Execute(queryMonth);
                            }

                            string Qeury = @"Select A.WorkflowId, A.FinanceWorkflowId,AW.WfNoOfLevels  From TbProjectActivity A 
                                 Left Join TbProjectWorkflow  AW On AW.WorkflowID = A.WorkflowId
                                 Where A.IsDeleted = 0 And AW.IsDeleted = 0 And A.ActivityId = @actid";
                            dynamic objWF = _connection.Query<object>(Qeury, new { actid = actid }).FirstOrDefault();
                            //Qeury = @"Select WorkspaceID From TbProject  A Inner Join TbInitiative B On B.InitiativeId =A.InitiativeId Where ProjectId = @ProjectId";
                            Qeury = @"Select WSID as WorkspaceID From TbProject  Where ProjectId = @ProjectId";
                            var WID = _connection.Query<int>(Qeury, new { ProjectId = inputObj.ProjectId }).FirstOrDefault();
                            //AddTo SyncDB
                            strQuery = @"INSERT INTO TaskSyncDB(Type, Command, TypeIDColumn, TypeID,WorkflowID,FinanceWorkflowID,TotalWFLevel,Status,WorkspaceID,CreatedDate, CreatedBy )
                                  VALUES(@Type, @Command, @TypeIDColumn, @TypeID,@WorkflowID,@FinanceWorkflowID,@WfNoOfLevels,@Status,@WorkspaceID, now(), @CreatedBy); SELECT LAST_INSERT_ID();";
                            var syncDBId = _connection.Query<int>(strQuery, new
                            {
                                Type = "Activity",
                                Command = "ADD",
                                TypeIDColumn = "ActivityId",
                                TypeID = actid,
                                WorkflowID = objWF == null ? 0 : objWF.WorkflowId,
                                FinanceWorkflowID = objWF == null ? 0 : objWF.FinanceWorkflowId,
                                WfNoOfLevels = objWF == null ? 0 : objWF.WfNoOfLevels,
                                Status = "Pending",
                                WorkspaceID = WID,
                                CreatedBy = loggedUserId
                            }).Single();

                            // Send Notification 

                            //AddToActivityLog(inputObj.ProjectId, actid, "Created a new activity named " + inputObj.ActivityName, loggedUserId);
                            ProjectAuditLog objLog = new ProjectAuditLog();
                            objLog.ProjectID = inputObj.ProjectId;
                            objLog.AuditFrom = "Activity";
                            objLog.AuditEvent = "ADD";
                            objLog.AuditFromID = actid;
                            objLog.FromIDColumnName = "ActivityId";
                            objLog.Message = "Created a new activity named " + inputObj.ActivityName;
                            objLog.CreatedBy = loggedUserId;
                            ProjectDAL.AddAuditLog(objLog);

                            retStatus = true;
                            inputObj.ActivityId = actid;

                            //bool addUser = AddUsersToActivity(actid, activityAttchments.ActivityUsersList, loggedUserId);
                            //if (inputObj.ParentActivityId > 0)
                            //{
                            //    bool del = DeleteUsersFromActivity(inputObj.ParentActivityId, loggedUserId);
                            //    strQuery = @"UPDATE TbProjectActivity SET   SurveyId=null, SurveySectionId=null, SurveyQuestionId=null, SurveyResponseId=null, 
                            //    SurveyLogic=null, UpdatedBy=@updby, UpdatedDate=@upddate 
                            //WHERE ActivityId=@actid ";
                            //    _connection.Execute(strQuery, new
                            //    {
                            //        actid = inputObj.ParentActivityId,
                            //        updby = loggedUserId,
                            //        upddate = DateTime.Now
                            //    });
                            //}

                            //if (activityAttchments.ActivityTagsList != "null")
                            //{
                            //    bool addTags = AddTagsToActivity(actid, activityAttchments.ActivityTagsList, loggedUserId);
                            //}
                            //if (activityAttchments.ExpenseTagsList != "null")
                            //{
                            //    bool addExpTags = AddExpenseTagsToActivity(actid, activityAttchments.ExpenseTagsList, loggedUserId);
                            //}
                            //if (activityAttchments.ExpenseTagsNotifyUsersList != "null")
                            //{
                            //    bool notifyExpenseUser = NotifyExpenseTagsUsers(activityAttchments.ExpenseTagsNotifyUsersList, inputObj.ProjectId);
                            //}
                            bool addPriodicity = AddPeriodicityToActivity(loggedUserId, inputObj);

                            // if payment linked activity add a budget head and Item , 
                            if (inputObj.IsPaymentLinked == true)
                            {
                                string BudgetHead = string.Empty;
                                string Query = string.Empty;
                                BudgetHead = "Output";
                                Query = @"SELECT ID FROM TbBudgetPlan where BudgetHead = @BudgetHead and ProjectId = @ProjectId and IsDeleted = 0";
                                var BudgetID = _connection.Query<int>(Query, new { BudgetHead = BudgetHead, ProjectId = inputObj.ProjectId }).FirstOrDefault();

                                if (BudgetID > 0)
                                {
                                    Query = @"INSERT INTO TbBudgetPlanItemDetails(ProjectId, BudgetHeadID, ItemName, Amount, CreatedDate, CreatedBy, IsDeleted) VALUES(@ProjectId,@BudgetHeadID,@ItemName,@Amount,now(),@CreatedBy,0);SELECT LAST_INSERT_ID();";
                                    var Id = _connection.Query<int>(Query, new
                                    {
                                        ProjectId = inputObj.ProjectId,
                                        BudgetHeadID = BudgetID,
                                        ItemName = inputObj.ActivityName,
                                        Amount = inputObj.PaymentLinkedBudget,
                                        CreatedBy = loggedUserId
                                    }).Single();
                                }
                                else if (BudgetID == 0)
                                {
                                    Query = @"INSERT INTO TbBudgetPlan(ProjectId, BudgetHead, HeadAmount, CreatedDate, CreatedBy, IsDeleted) VALUES(@ProjectId,@BudgetHead,@HeadAmount,now(),@CreatedBy,0);SELECT LAST_INSERT_ID();";
                                    var HeadID = _connection.Query<int>(Query, new
                                    {
                                        ProjectId = inputObj.ProjectId,
                                        BudgetHead = BudgetHead,
                                        HeadAmount = inputObj.PaymentLinkedBudget,
                                        CreatedBy = loggedUserId
                                    }).Single();

                                    Query = @"INSERT INTO TbBudgetPlanItemDetails(ProjectId, BudgetHeadID, ItemName, Amount, CreatedDate, CreatedBy, IsDeleted) VALUES(@ProjectId,@BudgetHeadID,@ItemName,@Amount,now(),@CreatedBy,0);SELECT LAST_INSERT_ID();";
                                    var id = _connection.Query<int>(Query, new
                                    {
                                        ProjectId = inputObj.ProjectId,
                                        BudgetHeadID = HeadID,
                                        ItemName = inputObj.ActivityName,
                                        Amount = inputObj.PaymentLinkedBudget,
                                        CreatedBy = loggedUserId
                                    }).Single();
                                }

                            }
                        }
                    }
                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return actid;
        }

        /// <summary>
        /// Add new activity log
        /// </summary>
        /// <param name="ProjectId"></param>
        /// <param name="ActivityId"></param>
        /// <param name="message"></param>
        /// <param name="loggedUserId"></param>
        public void AddToActivityLog(int ProjectId, int ActivityId, string message, int loggedUserId)
        {
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = @"insert into TbProjectActivityLog (ProjectId, ActivityId, Message, CreatedDate, CreatedBy)
                                    values(@projid, @act, @msg, @createdate, @createby);SELECT LAST_INSERT_ID();";
                    var logid = _connection.Query<ActivityLog>(query, new
                    {
                        projid = ProjectId,
                        act = ActivityId,
                        msg = message,
                        createdate = DateTime.Now,
                        createby = loggedUserId,
                    }).Single();

                }
            }
            catch (Exception ex)
            {
            }
            return;
        }

        /// <summary>
        /// Function used to notification send to users through mail
        /// </summary>
        /// <param name="notifyuserlist"></param>
        /// <param name="projid"></param>
        /// <returns></returns>
        public bool NotifyExpenseTagsUsers(string notifyuserlist, int projid)
        {
            string strQuery = string.Empty;

            try
            {
                List<User> objNotifyUserList = JsonConvert.DeserializeObject<List<User>>(notifyuserlist);
                UserDAL objUserDAL = new UserDAL();
                ProjectDAL objProjectDAL = new ProjectDAL();
                string projname = objProjectDAL.GetProjectName(projid);
                foreach (User userItem in objNotifyUserList)
                {
                    LoggedUserInfo userItemDetails = objUserDAL.GetLogUser(userItem.ID);
                    bool bStatus = false;
                    EmailActivity objEmail = new EmailActivity();
                    NotifyExpenseTags obj = new NotifyExpenseTags();
                    obj.UserName = userItemDetails.Name;
                    obj.ProjectName = projname;
                    obj.UserEmailId = userItemDetails.EmailId;
                    bStatus = objEmail.SendMail("Notify Expense Tags", obj);
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Add new project activity expense tag 
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <param name="exptaglist"></param>
        /// <param name="loggedUserId"></param>
        /// <returns></returns>
        public bool AddExpenseTagsToActivity(int ActivityId, string exptaglist, int loggedUserId)
        {
            string strQuery = string.Empty;
            var id = 0;
            bool success = DeleteExpenseTagsFromActivity(ActivityId, loggedUserId);

            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {
                    List<Tags> objExpTagList = JsonConvert.DeserializeObject<List<Tags>>(exptaglist);
                    foreach (Tags expTagItem in objExpTagList)
                    {
                        strQuery = @"SELECT EXISTS(SELECT ID from TbProjectActivityToExpenseTags WHERE ActivityId=@actid and ExpenseTagID=@tagid);";
                        id = _connection.Query<int>(strQuery, new { actid = ActivityId, tagid = expTagItem.TagID }).Single();

                        if (id == 0)
                        {
                            strQuery = @"INSERT INTO TbProjectActivityToExpenseTags(ActivityId,ExpenseTagID,CreatedDate,CreatedBy)
                                            VALUES(@actid,@tagid,now(),@userID); SELECT LAST_INSERT_ID();";
                            id = _connection.Query<int>(strQuery, new { actid = ActivityId, tagid = expTagItem.TagID, userID = loggedUserId }).Single();
                        }
                        else
                        {
                            strQuery = @"Update TbProjectActivityToExpenseTags Set isDeleted=0, UpdatedDate=@updatedDate,UpdatedBy=@loggeduserid 
                                             Where ActivityId=@actid and ExpenseTagID=@tagid";
                            _connection.Execute(strQuery, new { updatedDate = DateTime.Now, loggeduserid = loggedUserId, actid = ActivityId, tagid = expTagItem.TagID });
                        }
                    }
                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to delete project activity expense tag
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <param name="loggedUserId"></param>
        /// <returns></returns>
        public bool DeleteExpenseTagsFromActivity(int ActivityId, int loggedUserId)
        {
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string strQuery = "Update  TbProjectActivityToExpenseTags SET IsDeleted =@IsDeleted ,UpdatedDate = @updatedDate ,UpdatedBy =@loggeduserid ";
                    strQuery += " Where ActivityId=@actid ";
                    _connection.Execute(strQuery, new { actid = ActivityId, IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId });
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to delete already exists project activity tag and add new data
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <param name="taglist"></param>
        /// <param name="loggedUserId"></param>
        /// <returns></returns>
        public bool AddTagsToActivity(int ActivityId, string taglist, int loggedUserId)
        {
            string strQuery = string.Empty;
            var id = 0;
            bool success = DeleteTagsFromActivity(ActivityId, loggedUserId);

            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {
                    List<Tags> objTagList = JsonConvert.DeserializeObject<List<Tags>>(taglist);
                    foreach (Tags tagItem in objTagList)
                    {
                        strQuery = @"SELECT EXISTS(SELECT ID from TbProjectActivityToTags WHERE ActivityId=@actid and ActivityTagID=@tagid);";
                        id = _connection.Query<int>(strQuery, new { actid = ActivityId, tagid = tagItem.TagID }).Single();

                        if (id == 0)
                        {
                            strQuery = @"INSERT INTO TbProjectActivityToTags(ActivityId,ActivityTagID,CreatedDate,CreatedBy)
                                            VALUES(@actid,@tagid,now(),@userID); SELECT LAST_INSERT_ID();";
                            id = _connection.Query<int>(strQuery, new { actid = ActivityId, tagid = tagItem.TagID, userID = loggedUserId }).Single();
                        }
                        else
                        {
                            strQuery = @"Update TbProjectActivityToTags Set isDeleted=0, UpdatedDate=@updatedDate,UpdatedBy=@loggeduserid 
                                             Where ActivityId=@actid and ActivityTagID=@tagid";
                            _connection.Execute(strQuery, new { updatedDate = DateTime.Now, loggeduserid = loggedUserId, actid = ActivityId, tagid = tagItem.TagID });
                        }
                    }
                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to delete project activity tags based on ActivityId,loggedUserId
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <param name="loggedUserId"></param>
        /// <returns></returns>
        public bool DeleteTagsFromActivity(int ActivityId, int loggedUserId)
        {
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string strQuery = "Update  TbProjectActivityToTags SET IsDeleted =@IsDeleted ,UpdatedDate = @updatedDate ,UpdatedBy =@loggeduserid ";
                    strQuery += " Where ActivityId=@actid ";
                    _connection.Execute(strQuery, new { actid = ActivityId, IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId });
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to edit project activity based on ActivityId
        /// </summary>
        /// <param name="inputObj"></param>
        /// <param name="loggedUserId"></param>
        /// <param name="activityAttchments"></param>
        /// <returns></returns>
        public int EditActivity(ProjectActivity inputObj, int loggedUserId, ActivityAttchments activityAttchments)
        {
            string strQuery = string.Empty;
            int actId = 0;

            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        strQuery = @"UPDATE TbProjectActivity SET 
                                ProjectId=@projectid, ParentActivityId=@parentactid, ActivityName=@actname, Description=@desc, 
                                StartDate=@startdate, EndDate=@enddate, WeightagePercentage=@weight, ActivityType=@acttype, 
                                SurveyId=@surveyid,BeneficiaryTypeQuestionID=@BeneficiaryTypeQuestionID, SurveySectionId=@sectionid, 
                                SurveyQuestionId=@quesid, SurveyResponseId=@respid, SurveyLogic=@logic, SurveyTarget=@target, 
                                IsPaymentLinked=@ispaylink, PaymentLinkedBudget=@linkbudg, WorkflowId=@wfid, Periodicity=@period, 
                                UpdatedBy=@updby, UpdatedDate=@upddate, AutoGeneratedActivityId=@AutoGeneratedActivityId, 
                                AdditionalSectionId=@AdditionalSectionId, AdditionalQuestionId=@AdditionalQuestionId, 
                                AdditionalQuestionType=@AdditionalQuestionType, IsSubActivitiesAvailable=@IsSubActivitiesAvailable,
                                UnitOfMeasure=@UnitOfMeasure,FinancialActivityType = @FinancialActivityType,FinancialSurveyLogic=@FinancialSurveyLogic,
                                FinancialSurveyTarget=@FinancialSurveyTarget,FinancialAdditionalSurveyId=@FinancialAdditionalSurveyId,
                                FinancialAdditionalSectionId=@FinancialAdditionalSectionId,FinancialAdditionalQuestionId=@FinancialAdditionalQuestionId,
                                FinancialAdditionalQuestionType=@FinancialAdditionalQuestionType,UnitCost=@UnitCost WHERE ActivityId=@actid ";
                        _connection.Execute(strQuery, new
                        {
                            projectid = inputObj.ProjectId,
                            parentactid = inputObj.ParentActivityId,
                            actname = inputObj.ActivityName,
                            desc = inputObj.Description != "null" ? inputObj.Description : null,
                            startdate = inputObj.StartDate,
                            enddate = inputObj.EndDate,
                            weight = inputObj.WeightagePercentage,
                            acttype = inputObj.ActivityType,
                            surveyid = (inputObj.ActivityType == "Quantitative" ? 0 : inputObj.SurveyId),
                            BeneficiaryTypeQuestionID = inputObj.BeneficiaryTypeQuestionID,
                            sectionid = (inputObj.ActivityType == "Quantitative" ? 0 : inputObj.SurveySectionId),
                            quesid = (inputObj.ActivityType == "Quantitative" ? 0 : inputObj.SurveyQuestionId),
                            respid = inputObj.SurveyResponseId,
                            logic = inputObj.SurveyLogic,
                            target = inputObj.SurveyTarget,
                            ispaylink = inputObj.IsPaymentLinked,
                            linkbudg = inputObj.PaymentLinkedBudget,
                            wfid = inputObj.WorkflowId,
                            period = inputObj.Periodicity,
                            updby = loggedUserId,
                            upddate = DateTime.Now,
                            actid = inputObj.ActivityId,
                            inputObj.AutoGeneratedActivityId,
                            inputObj.AdditionalSectionId,
                            inputObj.AdditionalQuestionId,
                            AdditionalQuestionType = (inputObj.AdditionalQuestionId > 0 ? 1 : 0),
                            inputObj.IsSubActivitiesAvailable,
                            inputObj.UnitOfMeasure,
                            FinancialActivityType = inputObj.FinancialActivityType,
                            FinancialSurveyLogic = inputObj.FinancialSurveyLogic,
                            FinancialSurveyTarget = inputObj.FinancialSurveyTarget,
                            FinancialAdditionalSurveyId = inputObj.FinancialAdditionalSurveyId,
                            FinancialAdditionalSectionId = inputObj.FinancialAdditionalSectionId,
                            FinancialAdditionalQuestionId = inputObj.FinancialAdditionalQuestionId,
                            FinancialAdditionalQuestionType = (inputObj.FinancialAdditionalQuestionId > 0 ? 1 : 0),
                            UnitCost = inputObj.UnitCost
                        });

                        actId = inputObj.ActivityId;

                        if (inputObj.OutPutQuantitativeLogic != null && inputObj.OutPutQuantitativeLogic.Count > 0)
                        {
                            string strQueryUpdate = @"Update TbOutputSurveyCollection SET  IsActive =@IsActive WHERE ActivityId = @ActivityId;";
                            _connection.Execute(strQueryUpdate, new
                            {
                                ActivityId = inputObj.ActivityId,
                                IsActive = 0
                            });

                            string strQueryUpdate1 = @"UPDATE TbOutputSurveyLogic T2 INNER JOIN TbOutputSurveyCollection T1 ON T1.ID = T2.SurveyCollectionID  SET T2.IsActive = 0 WHERE T1.ActivityId =  @ActivityId;";
                            _connection.Execute(strQueryUpdate1, new
                            {
                                ActivityId = inputObj.ActivityId,
                                IsActive = 0
                            });

                            string QueryOutCollection = @"INSERT INTO TbOutputSurveyCollection(ActivityId,SurveyId,SectionId,QuestionId,BeneficiaryQuestionID,CreatedDate,IsActive,TypeofLogic) VALUES(@ActivityId,@SurveyId,@SectionId,@QuestionId,@BeneficiaryQuestionID,now(),1,@TypeofLogic); SELECT LAST_INSERT_ID();";

                            foreach (var itm in inputObj.OutPutQuantitativeLogic)
                            {
                                int collId = _connection.Query<int>(QueryOutCollection, new
                                {
                                    ActivityId = inputObj.ActivityId,
                                    SurveyId = itm.SurveyId,
                                    SectionId = itm.SectionId,
                                    QuestionId = itm.QuestionId,
                                    BeneficiaryQuestionID = itm.BeneficiaryTypeQstnID,
                                    TypeofLogic = itm.TypeofLogic
                                }).Single();

                                if (collId > 0 && itm.lstSurveyPrimeLogic != null && itm.lstSurveyPrimeLogic.Count > 0)
                                {
                                    string QueryOutSurveyLogic = @"INSERT INTO TbOutputSurveyLogic(SurveyCollectionID,SurveyLogic,SurveyAnswer,IsActive,CreatedDate,LogicCondition) VALUES(@SurveyCollectionID,@SurveyLogic,@SurveyAnswer,1,now(),@LogicCondition);";

                                    foreach (var itm1 in itm.lstSurveyPrimeLogic)
                                    {
                                        _connection.Execute(QueryOutSurveyLogic, new
                                        {
                                            SurveyCollectionID = collId,
                                            SurveyLogic = itm1.SurveyLogicPrime,
                                            SurveyAnswer = itm1.SurveyLogicPrimeAnswer,
                                            LogicCondition = itm1.SurveyLogicCondition
                                        });
                                    }
                                }
                            }
                        }

                        if (inputObj.lstProjectActivityMonthwiseData != null && inputObj.lstProjectActivityMonthwiseData.Count > 0)
                        {
                            string strQueryMonthUpdate = @"Update TbProjectActivityMonthwiseData SET  IsActive =@IsActive WHERE ActivityId = @ActivityId;";
                            _connection.Execute(strQueryMonthUpdate, new
                            {
                                ActivityId = inputObj.ActivityId,
                                IsActive = 0
                            });

                            string queryMonth = "insert into TbProjectActivityMonthwiseData(ActivityId,Target,Budget,ActMonth,ActYear,CreatedDate,IsActive) ";

                            int mntcount = 0;

                            foreach (var monthItem in inputObj.lstProjectActivityMonthwiseData)
                            {
                                queryMonth += " select " + inputObj.ActivityId + "," + monthItem.Target + "," + monthItem.Budget + "," + monthItem.ActMonth + "," + monthItem.ActYear + ",NOW(),1";

                                mntcount++;

                                if (mntcount < inputObj.lstProjectActivityMonthwiseData.Count)
                                {
                                    queryMonth += " UNION ALL ";
                                }
                            }

                            _connection.Execute(queryMonth);
                        }

                        string Qeury = @"Select WfNoOfLevels  From  TbProjectWorkflow  Where IsDeleted = 0 And WorkflowID = @WorkflowID";
                        var WfNoOfLevels = _connection.Query<int>(Qeury, new { WorkflowID = inputObj.WorkflowId }).FirstOrDefault();

                        ////Update To SyncDB
                        strQuery = @"Update TaskSyncDB SET  WorkflowID =@WorkflowID,TotalWFLevel =@TotalWFLevel WHERE TypeID = @TypeID  And Type =@Type ";
                        var syncDBId = _connection.Execute(strQuery, new
                        {
                            Type = "Activity",
                            TypeID = inputObj.ActivityId,
                            WorkflowID = inputObj.WorkflowId,
                            TotalWFLevel = WfNoOfLevels

                        });


                        //AddToActivityLog(inputObj.ProjectId, inputObj.ActivityId, "Updated the activity named " + inputObj.ActivityName, loggedUserId);
                        ProjectAuditLog objLog = new ProjectAuditLog();
                        objLog.ProjectID = inputObj.ProjectId;
                        objLog.AuditFrom = "Activity";
                        objLog.AuditEvent = "EDIT";
                        objLog.AuditFromID = inputObj.ActivityId;
                        objLog.FromIDColumnName = "ActivityId";
                        objLog.Message = "Updated the activity named " + inputObj.ActivityName;
                        objLog.CreatedBy = loggedUserId;
                        ProjectDAL.AddAuditLog(objLog);

                        //bool addUser = AddUsersToActivity(inputObj.ActivityId, activityAttchments.ActivityUsersList, loggedUserId, inputObj.ProjectId);
                        //if (activityAttchments.ActivityTagsList != "null")
                        //{
                        //    bool addTags = AddTagsToActivity(inputObj.ActivityId, activityAttchments.ActivityTagsList, loggedUserId);
                        //}
                        //if (activityAttchments.ExpenseTagsList != "null")
                        //{
                        //    bool addExpTags = AddExpenseTagsToActivity(inputObj.ActivityId, activityAttchments.ExpenseTagsList, loggedUserId);
                        //}
                        //if (activityAttchments.ExpenseTagsNotifyUsersList != "null")
                        //{
                        //    bool notifyExpenseUser = NotifyExpenseTagsUsers(activityAttchments.ExpenseTagsNotifyUsersList, loggedUserId);
                        //}
                        bool addPriodicity = AddPeriodicityToActivity(loggedUserId, inputObj);
                    }

                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return actId;
        }

        /// <summary>
        /// Function used to delete already exists and add new project activity users
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <param name="userlist"></param>
        /// <param name="loggedUserId"></param>
        /// <param name="ProjectId"></param>
        /// <returns></returns>
        public bool AddUsersToActivity(int ActivityId, string userlist, int loggedUserId, int ProjectId = 0)
        {
            string query = string.Empty;
            var id = 0;
            bool success = DeleteUsersFromActivity(ActivityId, loggedUserId);

            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {

                    ProjectActivity actDetails = GetActivityDetailsByID(ActivityId);
                    AddToActivityLog(actDetails.ProjectId, actDetails.ActivityId, "Assigned Users to the activity named " + actDetails.ActivityName, loggedUserId);

                    List<UsersInfo> objUserList = JsonConvert.DeserializeObject<List<UsersInfo>>(userlist);
                    foreach (UsersInfo userItem in objUserList)
                    {
                        query = @"SELECT EXISTS(SELECT ID FROM TbProjectActivityToUsers WHERE ActivityId=@actid and UserId=@userid);";
                        id = _connection.Query<int>(query, new { actid = ActivityId, userid = userItem.ID }).Single();

                        if (id > 0)
                        {
                            query = @"Update TbProjectActivityToUsers SET IsDeleted=@IsDeleted,UpdatedDate=@updatedDate,UpdatedBy=@loguser 
                                WHERE ActivityId=@actid and UserId=@userid";
                            _connection.Execute(query, new
                            {
                                IsDeleted = 0,
                                updatedDate = DateTime.Now,
                                loguser = loggedUserId,
                                actid = ActivityId,
                                userid = userItem.ID
                            });
                        }
                        else
                        {
                            query = @"INSERT INTO TbProjectActivityToUsers(ActivityId,UserId,IsDeleted,CreatedDate,CreatedBy)
                            VALUES(@actid,@userid,@isdeleted,@createddate,@createdby); SELECT LAST_INSERT_ID();";
                            id = _connection.Query<int>(query, new
                            {
                                actid = ActivityId,
                                userid = userItem.ID,
                                isdeleted = 0,
                                createddate = DateTime.Now,
                                createdby = loggedUserId
                            }).Single();

                            query = "Select Name  From TbUser Where ID =@UserID ";
                            var name = _connection.Query<string>(query, new { UserID = userItem.ID }).Single();

                            ProjectAuditLog objLog = new ProjectAuditLog();
                            objLog.ProjectID = ProjectId;
                            objLog.AuditFrom = "Activity";
                            objLog.AuditEvent = "ADD";
                            objLog.AuditFromID = ActivityId;
                            objLog.FromIDColumnName = "ActivityId";
                            objLog.Message = "Activity assigned to user  " + name;
                            objLog.CreatedBy = loggedUserId;
                            ProjectDAL.AddAuditLog(objLog);

                            query = "Select Name  From TbUser Where ID =@UserID ";
                            var AssgName = _connection.Query<string>(query, new { UserID = loggedUserId }).Single();
                            query = @"INSERT INTO TbTaskAuditLog(ProjectID,TaskType,TaskTypeID,TypeIDColumn,AssignedTo,AssignedBy,Message,CreatedDate,CreatedBy)
                            VALUES(@ProjectID,@TaskType,@TaskTypeID,@TypeIDColumn,@AssignedTo,@AssignedBy,@Message,now(),@CreatedBy); SELECT LAST_INSERT_ID();";
                            id = _connection.Query<int>(query, new
                            {
                                ProjectID = ProjectId,
                                TaskType = "Activity",
                                TaskTypeID = ActivityId,
                                TypeIDColumn = "ActivityId",
                                AssignedTo = userItem.ID,
                                AssignedBy = loggedUserId,
                                Message = "Assigned the task to " + name,
                                createdby = loggedUserId
                            }).Single();

                            // Send Notification 
                            try
                            {
                                // Send Notification 
                                var title = "";
                                var sub = "";
                                query = "SELECT ActivityName FROM TbProjectActivity where ActivityId = @ActivityId ";
                                var ActivityName = _connection.Query<string>(query, new { ActivityId = ActivityId }).Single();

                                title = AssgName + "ACTIVITY ASSINGED";
                                sub = AssgName + "Added an new Activity :" + ActivityName + "' on " + DateTime.Now;
                                Notification objNotification = new Notification();
                                objNotification.UserId = userItem.ID;
                                objNotification.Title = title;
                                objNotification.Subject = sub;
                                new NotificationDAL().SendUserNotification(objNotification);
                            }
                            catch
                            {

                            }
                        }
                    }

                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to delete project activity users
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <param name="loggedUserId"></param>
        /// <returns></returns>
        public bool DeleteUsersFromActivity(int ActivityId, int loggedUserId)
        {
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string strQuery = "Update  TbProjectActivityToUsers SET IsDeleted =@IsDeleted ,UpdatedDate = @updatedDate ,UpdatedBy =@loggeduserid ";
                    strQuery += " Where ActivityId=@actid ";
                    _connection.Execute(strQuery, new { actid = ActivityId, IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId });
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to add periodicity activity
        /// </summary>
        /// <param name="loggedUserId"></param>
        /// <param name="inputObj"></param>
        /// <returns></returns>
        public bool AddPeriodicityToActivity(int loggedUserId, ProjectActivity inputObj)
        {
            bool success = false;
            List<string> lstTrackDates = new List<string>();
            string query = string.Empty;

            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {

                    bool isDeleted = DeletePeriodicityForActivity(inputObj.ActivityId.ToString());

                    switch (inputObj.Periodicity)
                    {
                        case (int)CommonActivity.ReportingFrequency.Once:
                            //DateTime? reportvalue = CommonActivity.GetDateTimeValue(inputObj.PeriodicityOnceDate);
                            lstTrackDates.Add(inputObj.PeriodicityOnceDate.ToString("yyyy-MM-dd"));
                            break;
                        case (int)CommonActivity.ReportingFrequency.Daily:
                            lstTrackDates = CommonActivity.GetReportingFrequencyDateList(inputObj.StartDate, inputObj.EndDate, inputObj.Periodicity, 0, 0);
                            break;
                        case (int)CommonActivity.ReportingFrequency.Weekly:
                            lstTrackDates = CommonActivity.GetReportingFrequencyDateList(inputObj.StartDate, inputObj.EndDate, inputObj.Periodicity, inputObj.PeriodicityWeek, 0);
                            break;
                        case (int)CommonActivity.ReportingFrequency.Monthly:
                            lstTrackDates = CommonActivity.GetReportingFrequencyDateList(inputObj.StartDate, inputObj.EndDate, inputObj.Periodicity, inputObj.PeriodicityMonthDay, 0);
                            break;
                        case (int)CommonActivity.ReportingFrequency.Quarterly:
                            lstTrackDates = CommonActivity.GetReportingFrequencyDateList(inputObj.StartDate, inputObj.EndDate, inputObj.Periodicity, inputObj.PeriodicityMonthDateDay, inputObj.PeriodicityMonth);
                            break;
                        case (int)CommonActivity.ReportingFrequency.Half_Yearly:
                            lstTrackDates = CommonActivity.GetReportingFrequencyDateList(inputObj.StartDate, inputObj.EndDate, inputObj.Periodicity, inputObj.PeriodicityMonthDateDay, inputObj.PeriodicityMonth);
                            break;
                        case (int)CommonActivity.ReportingFrequency.Yearly:
                            lstTrackDates = CommonActivity.GetReportingFrequencyDateList(inputObj.StartDate, inputObj.EndDate, inputObj.Periodicity, inputObj.PeriodicityMonthDateDay, inputObj.PeriodicityMonth);
                            break;
                    }

                    if (lstTrackDates != null && lstTrackDates.Count > 0)
                    {
                        query = "INSERT INTO TbProjectActivityTrackDate(TrackDate,ActivityId,TrackStatus) ";

                        for (int i = 0; i < lstTrackDates.Count; i++)
                        {
                            query += i > 0 ? " UNION  SELECT '" + lstTrackDates[i] + "'," + inputObj.ActivityId + ",0" : " SELECT '" + lstTrackDates[i] + "'," + inputObj.ActivityId + ",0";
                        }

                        if (query.Length > 0)
                        {
                            using (_connection = Utils.Database.GetDBConnection())
                            {
                                var result = _connection.Execute(query);

                                if (result > 0)
                                {
                                    success = true;
                                }
                            }
                        }
                    }
                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
            }

            return success;
        }

        /// <summary>
        /// Function used to delete periodicity activity based on ActivityId
        /// </summary>
        /// <param name="ActIdList"></param>
        /// <returns></returns>
        public bool DeletePeriodicityForActivity(string ActIdList)
        {
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string strQuery = "DELETE FROM TbProjectActivityTrackDate WHERE FIND_IN_SET(ActivityId,@actidlist) ";
                    _connection.Execute(strQuery, new { actidlist = ActIdList });
                }
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        /// <summary>
        /// Function used to remove periodicity activity based on ActivityId,loggedUserId
        /// </summary>
        /// <param name="loggedUserId"></param>
        /// <param name="ActIdList"></param>
        public void RemoveActivity(int loggedUserId, string ActIdList)
        {
            string query = string.Empty;
            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        query = @"with recursive act_tree as (
                                select ActivityId from TbProjectActivity where ActivityId in (" + ActIdList + @") 
                            union all
                                select child.ActivityId from TbProjectActivity as child 
                            join act_tree as parent on  parent.ActivityId = child.ParentActivityId
                        ) Update TbProjectActivity Set IsDeleted=@IsDeleted, UpdatedDate=@updatedDate,UpdatedBy=@loggeduserid 
                              Where exists (select ActivityId from act_tree t where t.ActivityId = TbProjectActivity.ActivityId)";
                        /// ActivityId in (select ActivityId from act_tree)";
                        _connection.Execute(query, new { IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId, actidlist = ActIdList });

                        //log the details into ActivityLog
                        List<ProjectActivity> objProjectActivityList = new List<ProjectActivity>();
                        query = @"with recursive act_tree as (
                                select ActivityId,ProjectId,ParentActivityId,ActivityName,Description,StartDate,EndDate,WeightagePercentage,ActivityType,SurveyId,BeneficiaryTypeQuestionID,SurveySectionId,SurveyQuestionId,SurveyResponseId,SurveyLogic,SurveyTarget,IsPaymentLinked,PaymentLinkedBudget,WorkflowId,FinanceWorkflowId,Periodicity,IsDeleted,CreatedDate,UpdatedDate,CreatedBy,UpdatedBy,Progress from TbProjectActivity where ActivityId in (" + ActIdList + @") 
                            union all
                                select child.ActivityId,child.ProjectId,child.ParentActivityId,child.ActivityName,child.Description,child.StartDate,child.EndDate,child.WeightagePercentage,child.ActivityType,child.SurveyId,child.BeneficiaryTypeQuestionID,child.SurveySectionId,child.SurveyQuestionId,child.SurveyResponseId,child.SurveyLogic,child.SurveyTarget,child.IsPaymentLinked,
                                child.PaymentLinkedBudget,child.WorkflowId,child.FinanceWorkflowId,child.Periodicity,child.IsDeleted,child.CreatedDate,child.UpdatedDate,child.CreatedBy,child.UpdatedBy,child.Progress from TbProjectActivity as child 
                            join act_tree as parent on  parent.ActivityId = child.ParentActivityId
                        ) select * from act_tree";
                        objProjectActivityList = _connection.Query<ProjectActivity>(query, new { IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId, actidlist = ActIdList }).ToList();
                        foreach (ProjectActivity actItem in objProjectActivityList)
                        {
                            //AddToActivityLog(actItem.ProjectId, actItem.ActivityId, "Removed the activity named " + actItem.ActivityName, loggedUserId);
                            ProjectAuditLog objLog = new ProjectAuditLog();
                            objLog.ProjectID = actItem.ProjectId;
                            objLog.AuditFrom = "Activity";
                            objLog.AuditEvent = "REMOVE";
                            objLog.AuditFromID = actItem.ActivityId;
                            objLog.FromIDColumnName = "ActivityId";
                            objLog.Message = "Removed the activity named " + actItem.ActivityName;
                            objLog.CreatedBy = loggedUserId;
                            ProjectDAL.AddAuditLog(objLog);
                        }

                        //Remove Users from Activity
                        query = @"Update TbProjectActivityToUsers Set IsDeleted=@IsDeleted, UpdatedDate=@updatedDate,UpdatedBy=@loggeduserid 
                               Where FIND_IN_SET(ActivityId,@actidlist)";
                        _connection.Execute(query, new { IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId, actidlist = ActIdList });

                        //Remove Expense Tags from Activity
                        query = @"Update TbProjectActivityToExpenseTags Set IsDeleted=@IsDeleted, UpdatedDate=@updatedDate,UpdatedBy=@loggeduserid 
                               Where FIND_IN_SET(ActivityId,@actidlist)";
                        _connection.Execute(query, new { IsDeleted = 1, updatedDate = DateTime.Now, loggeduserid = loggedUserId, actidlist = ActIdList });

                        //Remove the Periodicity from activity
                        bool isDeleted = DeletePeriodicityForActivity(ActIdList);
                    }
                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
            }
            return;
        }

        /// <summary>
        /// Function used to update output workflow based on ActivityId
        /// </summary>
        /// <param name="WorkFlowID"></param>
        /// <param name="ProjectId"></param>
        /// <param name="loggedUserId"></param>
        /// <param name="OutputId"></param>
        public void UpdateOutputWorkflow(int WorkFlowID, int ProjectId, int loggedUserId, int OutputId)
        {
            string query = string.Empty;
            try
            {
                using (var _Tran = new System.Transactions.TransactionScope())
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        query = @"Update TbProjectActivity set 
                        WorkflowId = @WorkFlowID ,
                        UpdatedDate = @updatedDate,
                        UpdatedBy=@userID where ActivityId = @OutputId; ";
                        _connection.Execute(query, new
                        {
                            OutputId = OutputId,
                            WorkflowID = WorkFlowID,
                            updatedDate = DateTime.Now,
                            userID = loggedUserId
                        });

                        // Updating WorkflowId and Totallevels to Taskdb 
                        if (WorkFlowID > 0)
                        {
                            string Qeury = @"Select WfNoOfLevels  From  TbProjectWorkflow  Where IsDeleted = 0 And WorkflowID = @WorkflowID";
                            var WfNoOfLevels = _connection.Query<int>(Qeury, new { WorkflowID = WorkFlowID }).FirstOrDefault();

                            ////Update To SyncDB
                            string strQuery = @"Update TaskSyncDB SET  WorkflowID =@WorkflowID,TotalWFLevel =@TotalWFLevel WHERE TypeID = @TypeID  And Type =@Type ";
                            var syncDBId = _connection.Execute(strQuery, new
                            {
                                Type = "Activity",
                                TypeID = OutputId,
                                WorkflowID = WorkFlowID,
                                TotalWFLevel = WfNoOfLevels

                            });
                        }
                        if (OutputId != 0)
                        {
                            ProjectAuditLog objLog = new ProjectAuditLog();
                            objLog.ProjectID = ProjectId;
                            objLog.AuditFrom = "Output";
                            objLog.AuditEvent = "EDIT";
                            objLog.AuditFromID = OutputId;
                            objLog.FromIDColumnName = "ActivityId";
                            objLog.Message = "Updated Outcome's workflow";
                            objLog.CreatedBy = loggedUserId;
                            ProjectDAL.AddAuditLog(objLog);
                        }
                    }
                    _Tran.Complete();
                }
            }
            catch (Exception ex)
            {
            }
            return;
        }
        #region GetProjectBeneficiaryType
        /// <summary>
        /// GetProjectBeneficiaryType
        /// </summary>
        /// <param name="projectId">projectId</param>
        /// <returns> List </returns>
        public List<ProjectSurveySection> GetSurveyBeneficiaryType(int surveyId = 0)
        {
            List<ProjectSurveySection> lstBeneficiaryType = new List<ProjectSurveySection>();
            string query = "";
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = @"SELECT t.BeneficiaryTypeID as SectionID,CONCAT((t.Name), ' - ' ,'Beneficiary Regestration form') SectionName,'Beneficiary' as SectionORBeneficiary 
                                 From TbProjectBeneficiaryType t inner join TbProjectSurvey s on t.BeneficiaryTypeID = s.BeneficiaryTypeID
                                  and s.SurveyID= @surveyId Where  IFNULL(t.IsActive,0)= @IsActive AND t.IsDeleted=0
                                   union 
                    SELECT Distinct SectionID, SectionName,'Section' as SectionORBeneficiary From TbProjectSurveySection Where SurveyID = @SurveyID  Order By SectionName ";

                    lstBeneficiaryType = _connection.Query<ProjectSurveySection>(query, new { IsActive = 1, surveyId = surveyId }).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return lstBeneficiaryType;
        }
        #endregion GetProjectBeneficiaryType
        public IEnumerable<BeneficiaryTypeQuestions> GetSurveyLinkedBeneficairyQuestionDetails(int SurveyID)
        {
            List<BeneficiaryTypeQuestions> lstBeneficiaryType = new List<BeneficiaryTypeQuestions>();
            string strQuery = string.Empty;

            using (_connection = Utils.Database.GetDBConnection())
            {

                strQuery = @"Select BTQ.BeneficiaryTypeID,QuestionID, QuestionName,AnsType.AnswerType as AnswerType
                             From TbBeneficiaryTypeQuestion BTQ  inner join TbProjectSurvey s on BTQ.BeneficiaryTypeID = s.BeneficiaryTypeID
                             inner join TbBeneficiaryAnswerType AnsType on  BTQ.AnswerTypeID =  AnsType.AnswerTypeID 
                             Where  BTQ.IsDeleted =0 and s.SurveyID= @SurveyID and AnsType.IsActive = 1 and AnsType.IsDeleted = 0 and BTQ.AnswerTypeID  != @QuestionTypeID and AnsType.Category in (1,2); ";
                lstBeneficiaryType = _connection.Query<BeneficiaryTypeQuestions>(strQuery, new { SurveyID = SurveyID, QuestionTypeID = (int)CommonActivity.QuestionType.Note }).ToList();
                #endregion ManageProjectActivity
            }
            return lstBeneficiaryType;
        }

        #region ManageProjectActivityIndividual

        /// <summary>
        /// Function used to fetch activity details based on ActivityId
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public ProjectActivity GetActivityDetailsByID(int ActivityId)
        {
            ProjectActivity objProjectActivityDetails = new ProjectActivity();
            string query = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = @"select ActivityId,ProjectId,ParentActivityId,ActivityName,Description,StartDate,EndDate,WeightagePercentage,ActivityType,SurveyId,SurveySectionId,SurveyQuestionId,SurveyResponseId,SurveyLogic,SurveyTarget,IsPaymentLinked,PaymentLinkedBudget,WorkflowId,FinanceWorkflowId
                            ,Periodicity,IsDeleted,CreatedDate,UpdatedDate,CreatedBy,UpdatedBy,Progress, AutoGeneratedActivityId, AdditionalSectionId, AdditionalQuestionId, IsSubActivitiesAvailable, UnitOfMeasure from TbProjectActivity where IsDeleted=@isdeleted and ActivityId=@actid Order By ActivityId Desc";
                    objProjectActivityDetails = _connection.Query<ProjectActivity>(query, new { isdeleted = 0, actid = ActivityId }).FirstOrDefault();

                    //Get Users List
                    objProjectActivityDetails.ActivityUsers = new List<User>();
                    //query = @"select * from TbUser where ID in 
                    //        ( select distinct UserId from TbProjectActivityToUsers where IsDeleted <>1 and ActivityId=@actid )  Order By ID Desc";

                    query = @"select distinct t.ID,t.Name,t.EmailId,t.Phone,t.Password,t.IsActive,t.NoOfLogins,t.FailedLoginCount,t.UserType,IFNULL(t.ProfileImage, '') as ProfileImage,t.Organization from TbUser t inner join TbProjectActivityToUsers u where
                                u.UserId = t.ID and u.IsDeleted <>1 and u.ActivityId=@actid  Order By t.ID Desc";

                    objProjectActivityDetails.ActivityUsers = _connection.Query<User>(query, new { actid = objProjectActivityDetails.ActivityId }).ToList();

                    //Get Expense tag List
                    objProjectActivityDetails.ExpenseTags = new List<Tags>();
                    //query = @"select * from TbProjectExpenseTags where TagID in 
                    //        ( select distinct ExpenseTagID from TbProjectActivityToExpenseTags where IsDeleted <>1 and ActivityId=@actid )  Order By TagID Desc";

                    query = @"select distinct t.TagID,t.TagName from TbProjectExpenseTags t inner join TbProjectActivityToExpenseTags e where
                            e.ExpenseTagID = t.TagID and e.IsDeleted <>1 and e.ActivityId=@actid Order By t.TagID Desc";

                    objProjectActivityDetails.ExpenseTags = _connection.Query<Tags>(query, new { actid = objProjectActivityDetails.ActivityId }).ToList();

                    //Get Activity tag List
                    objProjectActivityDetails.ActivityTags = new List<Tags>();
                    //query = @"select * from TbProjectTags where TagID in 
                    //        ( select distinct ActivityTagID from TbProjectActivityToTags where IsDeleted <>1 and ActivityId=@actid )  Order By TagID Desc";

                    query = @"select distinct t.TagID,t.TagName,t.TagColor from TbProjectTags t inner join TbProjectActivityToTags a where
                            a.ActivityTagID = t.TagID and a.IsDeleted <>1 and a.ActivityId=@actid  Order By t.TagID Desc";

                    objProjectActivityDetails.ActivityTags = _connection.Query<Tags>(query, new { actid = objProjectActivityDetails.ActivityId }).ToList();

                    //Get Periodicity parameters
                    DateTime? RptDate = null;
                    dynamic obj;
                    string strQeury = @"SELECT TrackDate FROM TbProjectActivityTrackDate WHERE ActivityId = @actid order by ID LIMIT 1";
                    obj = _connection.Query<object>(strQeury, new { actid = objProjectActivityDetails.ActivityId }).FirstOrDefault();

                    if (obj != null)
                    {
                        RptDate = obj.TrackDate;
                    }

                    if (RptDate != null)
                    {
                        switch (objProjectActivityDetails.Periodicity)
                        {
                            case (int)CommonActivity.ReportingFrequency.Once:
                                objProjectActivityDetails.PeriodicityOnceDate = RptDate.Value;
                                break;
                            case (int)CommonActivity.ReportingFrequency.Weekly:
                                objProjectActivityDetails.PeriodicityWeek = (int)RptDate.Value.DayOfWeek;
                                break;
                            case (int)CommonActivity.ReportingFrequency.Monthly:
                                objProjectActivityDetails.PeriodicityMonthDay = RptDate.Value.Day;
                                break;
                            case (int)CommonActivity.ReportingFrequency.Quarterly:
                                objProjectActivityDetails.PeriodicityMonthDateDay = RptDate.Value.Day;
                                objProjectActivityDetails.PeriodicityMonth = RptDate.Value.Month;
                                break;
                            case (int)CommonActivity.ReportingFrequency.Half_Yearly:
                                objProjectActivityDetails.PeriodicityMonthDateDay = RptDate.Value.Day;
                                objProjectActivityDetails.PeriodicityMonth = RptDate.Value.Month;
                                break;
                            case (int)CommonActivity.ReportingFrequency.Yearly:
                                objProjectActivityDetails.PeriodicityMonthDateDay = RptDate.Value.Day;
                                objProjectActivityDetails.PeriodicityMonth = RptDate.Value.Month;
                                break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return objProjectActivityDetails;
        }

        /// <summary>
        /// Function used to fetch activity log details based on ProjectId,ActivityId
        /// </summary>
        /// <param name="ProjectId"></param>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public IEnumerable<ProjectAuditLog> GetActivityLogList(int ProjectId, int ActivityId)
        {
            List<ProjectAuditLog> objActivityLogList = new List<ProjectAuditLog>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {

                    //strQuery = @"Select  Name,Message,A.CreatedDate from TbProjectActivityLog A Inner Join TbUser U  On U.ID=A.CreatedBy 
                    //                Where ProjectId=@projid and ActivityId=@actid";
                    strQuery = @"Select  U.Name,A.Message,A.CreatedDate,IFNULL(U.ProfileImage, '') AS ProfileImage from TbProjectAuditLog A Inner Join TbUser U  On U.ID=A.CreatedBy 
                                Where A.AuditFrom = 'Activity' And  A.ProjectId=@projid and A.AuditFromID=@actid Order By A.CreatedDate desc";

                    objActivityLogList = _connection.Query<ProjectAuditLog>(strQuery, new { projid = ProjectId, actid = ActivityId }).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return objActivityLogList;
        }

        /// <summary>
        /// Function used to get section details based on SurveyID
        /// </summary>
        /// <param name="SurveyID"></param>
        /// <returns></returns>
        public IEnumerable<ProjectSurveySection> GetSectionsBySurveyID(int SurveyID)
        {
            List<ProjectSurveySection> lstItems = new List<ProjectSurveySection>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {

                    strQuery = @"SELECT Distinct SectionID, SectionName From TbProjectSurveySection Where SurveyID =@SurveyID  Order By SectionName ";
                    lstItems = _connection.Query<ProjectSurveySection>(strQuery, new { SurveyID = SurveyID }).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return lstItems;
        }

        /// <summary>
        /// Function used to fetch project survey question based on SectionID
        /// </summary>
        /// <param name="SectionID"></param>
        /// <returns></returns>
        public IEnumerable<SurveyQuestion> GetQstnBySectionID(int SectionID)
        {
            List<SurveyQuestion> lstItems = new List<SurveyQuestion>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {

                    strQuery = @"SELECT Distinct Q.QuestionID, Q.QuestionName,QT.Type QuestionType ,QT.Category QuestionCategory From TbProjectSurveyQuestion Q 
                                Left Join TbQuestionType QT On QT.ID=Q.QuestionTypeID  Where Q.IsActive =1  and Q.SectionID =@SectionID and QT.Category in (1,2)  and Q.QuestionTypeID  != @QuestionTypeID  Order By Q.QuestionName"; ;
                    lstItems = _connection.Query<SurveyQuestion>(strQuery, new { SectionID = SectionID, QuestionTypeID = (int)CommonActivity.QuestionType.Note }).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return lstItems;
        }

        /// <summary>
        /// Function used to fetch logic type details 
        /// </summary>
        /// <returns></returns>
        public IEnumerable<QuestionTypes> GetLogicType()
        {
            List<QuestionTypes> lstItems = new List<QuestionTypes>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {

                    strQuery = @"SELECT ID, Type,IsPrimeLogic,IsNumeric,IsNonNumeric From TbLogicType where ifnull(IsActive,0) =1 Order By Type ";
                    lstItems = _connection.Query<QuestionTypes>(strQuery).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return lstItems;
        }

        #endregion ManageProjectActivityIndividual

        /// <summary>
        /// getData
        /// </summary>
        /// <param name="activityID"></param>
        /// <param name="logicType"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="additionalSurveyQuestionId"></param>
        /// <returns></returns>
        public double getData(int activityID, int logicType, string SurveyTarget,int additionalSectionId, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false, int TypeofLogic = 1)
        {
            List<ActivityDataCollectionDetails> objActivityDataCollectionDetails = new List<ActivityDataCollectionDetails>();
            List<ActivityDataCollectionDetails> lstBeneficiaryActivityDataCollectionDetails = new List<ActivityDataCollectionDetails>();

            List<ActivitySurveyResponse> lstActivitySurveyResponse = new List<ActivitySurveyResponse>();
            string query = string.Empty;
            double result = 0;

            bool IsSurveyQuestion = true;

            if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
            {
                ProjectSurveyDAL objProjectSurveyDAL = new ProjectSurveyDAL();
                IsSurveyQuestion = objProjectSurveyDAL.IsSurveyQuestion(additionalSectionId, additionalSurveyQuestionId);
            }

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = "SELECT ACT.ID,ACT.ActivityId,ACT.SurveyId,ACT.SectionId, ACT.QuestionId,BeneficiaryQuestionID,SRV.BeneficiaryTypeID,SRV.StartDate,SRV.EndDate ";
                    query += ",ifnull(SRVQST.QuestionTypeID,0) SurveyAnswerType,ifnull(BENQST.AnswerTypeID,0) BenAnswerType,srvLogic.SurveyLogic,srvLogic.SurveyAnswer,ifnull(srvLogic.LogicCondition,0) as LogicCondition ";
                    query += " FROM TbProjectSurvey SRV LEFT JOIN TbOutputSurveyCollection ACT  ON ACT.SurveyId = SRV.SurveyId ";
                    query += " LEFT JOIN TbProjectSurveyQuestion SRVQST ON SRVQST.QuestionID =  ACT.QuestionId ";
                    query += " LEFT JOIN TbBeneficiaryTypeQuestion BENQST ON BENQST.QuestionID =  ACT.BeneficiaryQuestionID ";
                    query += " LEFT JOIN TbOutputSurveyLogic srvLogic ON srvLogic.SurveyCollectionID =  ACT.ID ";
                    query += "where ACT.ActivityId = @ActivityId  and  ifnull(ACT.IsActive,0)=1 AND ifnull(SRV.IsActive,0)=1 AND ifnull(ACT.TypeofLogic,1)=@TypeofLogic  and ifnull(srvLogic.IsActive,0)=1; ";

                    objActivityDataCollectionDetails = _connection.Query<ActivityDataCollectionDetails>(query, new { ActivityId = activityID, TypeofLogic = TypeofLogic }).ToList();

                    if (objActivityDataCollectionDetails != null && objActivityDataCollectionDetails.Count > 0)
                    {

                        List<ProjectOutputInitialData> lstProjectOutputInitialData = new List<ProjectOutputInitialData>();

                        for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
                        {
                            string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                            querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID and ifnull(srvCollection.TypeofLogic,1) = @TypeofLogic; ";
                            List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();

                            lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID, TypeofLogic = TypeofLogic }).ToList();

                            if (objActivityDataCollectionDetails[i].BeneficiaryTypeID <= 0)
                            {
                                List<ProjectOutputInitialData> lstProjectOutputInitialDataInner = new List<ProjectOutputInitialData>();
                                string subqury = GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);
                                
                                string query1 = "SELECT ResponseID,SyncTaskID,SubmissionCount from TbProjectSurveyResponses where QuestionID = @QuestionId AND ifnull(IsActive,0) = 1 ";
                                query1 += subqury;
                                lstProjectOutputInitialDataInner = _connection.Query<ProjectOutputInitialData>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).ToList();

                                if (lstProjectOutputInitialDataInner != null && lstProjectOutputInitialDataInner.Count > 0)
                                {
                                    if (i == 0 && (lstProjectOutputInitialData == null || lstProjectOutputInitialData.Count == 0))
                                    {
                                        lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataInner);
                                    }
                                    else
                                    {
                                        List<ProjectOutputInitialData> lstProjectOutputInitialDataFilter = new List<ProjectOutputInitialData>();

                                        if (i > 0 && objActivityDataCollectionDetails[i - 1].LogicCondition == (int)CommonActivity.LogicCondition.AND)
                                        {
                                            foreach (var itm1 in lstProjectOutputInitialDataInner)
                                            {
                                                foreach (var itm2 in lstProjectOutputInitialData)
                                                {
                                                    if (itm1.SyncTaskID == 0 && itm1.SubmissionCount == 0)
                                                    {
                                                        if (itm1.ResponseID == itm2.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm2);
                                                        }
                                                    }
                                                    else if (itm2.SyncTaskID == 0 && itm2.SubmissionCount == 0)
                                                    {
                                                        if (itm1.ResponseID == itm2.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //if (lstProjectOutputInitialData.Where(x => x.SyncTaskID == itm1.SyncTaskID && x.SubmissionCount == itm1.SubmissionCount).Count() > 0)
                                                        //{
                                                        //    lstProjectOutputInitialDataFilter.Add(itm1);
                                                        //}
                                                        if (itm2.SyncTaskID == itm1.SyncTaskID && itm2.SubmissionCount == itm1.SubmissionCount)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm1);
                                                        }
                                                    }
                                                }
                                            }

                                            lstProjectOutputInitialData = new List<ProjectOutputInitialData>();
                                            lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataFilter);
                                        }
                                        else
                                        {
                                            foreach (var itm1 in lstProjectOutputInitialDataInner)
                                            {
                                                if (lstProjectOutputInitialData.Where(x => x.SyncTaskID == itm1.SyncTaskID && x.SubmissionCount == itm1.SubmissionCount).Count() <= 0)
                                                {
                                                    lstProjectOutputInitialDataFilter.Add(itm1);
                                                }
                                            }

                                            if (lstProjectOutputInitialDataFilter != null && lstProjectOutputInitialDataFilter.Count > 0)
                                            {
                                                lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataFilter);
                                            }
                                        }
                                    }
                                }
                            }
                            else if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && objActivityDataCollectionDetails[i].QuestionId > 0)
                            {
                                List<ProjectOutputInitialData> lstProjectOutputInitialDataInner = new List<ProjectOutputInitialData>();
                               
                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string query1 = "SELECT ResponseID,SyncTaskID,SubmissionCount from TbProjectSurveyResponses where QuestionID = @QuestionId AND ifnull(IsActive,0) = 1 ";
                                query1 += subqury;
                                lstProjectOutputInitialDataInner = _connection.Query<ProjectOutputInitialData>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).ToList();

                                if (lstProjectOutputInitialDataInner != null && lstProjectOutputInitialDataInner.Count > 0)
                                {
                                    if (i == 0 && (lstProjectOutputInitialData == null || lstProjectOutputInitialData.Count == 0))
                                    {
                                        lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataInner);
                                    }
                                    else
                                    {
                                        List<ProjectOutputInitialData> lstProjectOutputInitialDataFilter = new List<ProjectOutputInitialData>();

                                        if (i > 0 && objActivityDataCollectionDetails[i - 1].LogicCondition == (int)CommonActivity.LogicCondition.AND)
                                        {
                                            foreach (var itm1 in lstProjectOutputInitialDataInner)
                                            {
                                                foreach (var itm2 in lstProjectOutputInitialData)
                                                {
                                                    if (itm1.SyncTaskID == 0 && itm1.SubmissionCount == 0)
                                                    {
                                                        if (itm1.ResponseID == itm2.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm2);
                                                        }
                                                    }
                                                    else if (itm2.SyncTaskID == 0 && itm2.SubmissionCount == 0)
                                                    {
                                                        if (itm1.ResponseID == itm2.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //if (lstProjectOutputInitialData.Where(x => x.ResponseID == itm1.ResponseID && x.SyncTaskID == itm1.SyncTaskID && x.SubmissionCount == itm1.SubmissionCount).Count() > 0)
                                                        //{
                                                        //    lstProjectOutputInitialDataFilter.Add(itm1);
                                                        //}
                                                        if (itm2.ResponseID == itm1.ResponseID && itm2.SyncTaskID == itm1.SyncTaskID && itm2.SubmissionCount == itm1.SubmissionCount)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm1);
                                                        }
                                                    }
                                                }
                                            }

                                            lstProjectOutputInitialData = new List<ProjectOutputInitialData>();
                                            lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataFilter);
                                        }
                                        else
                                        {
                                            foreach (var itm1 in lstProjectOutputInitialDataInner)
                                            {
                                                if (lstProjectOutputInitialData.Where(x => x.ResponseID == itm1.ResponseID && x.SyncTaskID == itm1.SyncTaskID && x.SubmissionCount == itm1.SubmissionCount).Count() <= 0)
                                                {
                                                    lstProjectOutputInitialDataFilter.Add(itm1);
                                                }
                                            }

                                            if (lstProjectOutputInitialDataFilter != null && lstProjectOutputInitialDataFilter.Count > 0)
                                            {
                                                lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataFilter);
                                            }
                                        }
                                    }
                                }
                            }
                            else if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && objActivityDataCollectionDetails[i].BeneficiaryQuestionID > 0)
                            {
                                List<ProjectOutputInitialData> lstProjectOutputInitialDataInner = new List<ProjectOutputInitialData>();
                                
                                string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                                string query1 = "SELECT DISTINCT BeneficiaryID AS ResponseID,RSP.SurveyID FROM TbBeneficiaryRegistrationDetails reg  JOIN ";
                                query1 += " TbProjectSurveyResponses RSP ON reg.BeneficiaryID = RSP.ResponseID WHERE reg.QuestionID = @QuestionId AND ifnull(reg.IsDeleted,0) = 0 AND  RSP.SurveyID=@SurveyId ";
                                query1 += subqury;

                                lstProjectOutputInitialDataInner = _connection.Query<ProjectOutputInitialData>(query1, new { QuestionId = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyId = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                                if (lstProjectOutputInitialDataInner != null && lstProjectOutputInitialDataInner.Count > 0)
                                {
                                    if (i == 0 && (lstProjectOutputInitialData == null || lstProjectOutputInitialData.Count == 0))
                                    {
                                        lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataInner);
                                    }
                                    else
                                    {
                                        List<ProjectOutputInitialData> lstProjectOutputInitialDataFilter = new List<ProjectOutputInitialData>();

                                        if (i > 0 && objActivityDataCollectionDetails[i - 1].LogicCondition == (int)CommonActivity.LogicCondition.AND)
                                        {
                                            foreach (var itm1 in lstProjectOutputInitialDataInner)
                                            {
                                                foreach (var itm2 in lstProjectOutputInitialData)
                                                {
                                                    if (itm1.SyncTaskID == 0 && itm1.SubmissionCount == 0)
                                                    {
                                                        if (itm1.ResponseID == itm2.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm2);
                                                        }
                                                    }
                                                    else if (itm2.SyncTaskID == 0 && itm2.SubmissionCount == 0)
                                                    {
                                                        if (itm1.ResponseID == itm2.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm1);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //if (lstProjectOutputInitialData.Where(x => x.ResponseID == itm1.ResponseID).Count() > 0)
                                                        //{
                                                        //    lstProjectOutputInitialDataFilter.Add(itm1);
                                                        //}
                                                        if (itm2.ResponseID == itm1.ResponseID)
                                                        {
                                                            lstProjectOutputInitialDataFilter.Add(itm1);
                                                        }
                                                    }
                                                }

                                            }

                                            lstProjectOutputInitialData = new List<ProjectOutputInitialData>();
                                            lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataFilter);
                                        }
                                        else
                                        {
                                            foreach (var itm1 in lstProjectOutputInitialDataInner)
                                            {
                                                if (lstProjectOutputInitialData.Where(x => x.ResponseID == itm1.ResponseID).Count() <= 0)
                                                {
                                                    lstProjectOutputInitialDataFilter.Add(itm1);
                                                }
                                            }

                                            if (lstProjectOutputInitialDataFilter != null && lstProjectOutputInitialDataFilter.Count > 0)
                                            {
                                                lstProjectOutputInitialData.AddRange(lstProjectOutputInitialDataFilter);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (logicType == (int)OutcomeLogicType.Average)
                        {
                            result = GetOutputQuantitativeAverage(lstProjectOutputInitialData, objActivityDataCollectionDetails, SurveyTarget, additionalSurveyQuestionId, additionalQuestionType, IsSurveyQuestion);
                        }
                        else if (logicType == (int)OutcomeLogicType.Cumulative_Sum)
                        {
                            result = GetOutputQuantitativeCumulativeSum(lstProjectOutputInitialData, objActivityDataCollectionDetails, SurveyTarget, additionalSurveyQuestionId, additionalQuestionType, IsSurveyQuestion);
                        }
                        else if (logicType == (int)OutcomeLogicType.Count_of_Unique_Reponses)
                        {
                            if (lstProjectOutputInitialData != null && lstProjectOutputInitialData.Count > 0)
                            {
                                result = lstProjectOutputInitialData.Count;
                            }
                        }


                        // commented on 27-02-2023
                        //var mySKUs = objActivityDataCollectionDetails.Select(l => l.QuestionId).Distinct().ToList();
                        //string joinedQuestionIds = string.Join(",", mySKUs);

                        //var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.BeneficiaryTypeID).Distinct().ToList();
                        //string joinedBeneficiaryTypeID = string.Join(",", mySKUs1);

                        //var benficiaryIds = objActivityDataCollectionDetails.Where(x => x.BeneficiaryQuestionID > 0).Select(l => l.BeneficiaryQuestionID).Distinct().ToList();
                        //string joinedBeneficiaryQuestionID = string.Join(",", benficiaryIds);

                        //List<ActivitySurveyResponse> lstActivitySurveyResponse = new List<ActivitySurveyResponse>();
                        //List<ActivitySurveyResponse> lstActivitySurveyResponse1 = new List<ActivitySurveyResponse>();
                        //List<ActivitySurveyResponse> lstBeneficiarySurveyResponse = new List<ActivitySurveyResponse>();

                        //if (joinedQuestionIds != null && joinedQuestionIds.Length > 0)
                        //{
                        //    string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID FROM TbProjectSurveyResponses where QuestionID in(" + joinedQuestionIds + ") and ifnull(IsActive,0)=1;";
                        //    lstActivitySurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry).ToList();

                        //    lstActivitySurveyResponse1 = lstActivitySurveyResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();
                        //}

                        //if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0)
                        //{
                        //    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                        //    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID limit 1) as SurveyID,";
                        //    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID  limit 1) as SyncTaskID ";
                        //    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID in(" + joinedBeneficiaryQuestionID + ") and ifnull(reg.IsDeleted,0)=0;";
                        //    lstBeneficiarySurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTBenQry).ToList();

                        //    lstActivitySurveyResponse1 = lstActivitySurveyResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();
                        //}


                        //if (logicType == (int)OutPutLogicType.Average)
                        //{
                        //    result = GetQuantitativeAverage(objActivityDataCollectionDetails, lstActivitySurveyResponse1, lstActivitySurveyResponse, joinedBeneficiaryQuestionID, SurveyTarget, lstBeneficiarySurveyResponse, additionalSurveyQuestionId, additionalQuestionType);
                        //}
                        //else if (logicType == (int)OutPutLogicType.Cumulative_Sum)
                        //{
                        //    result = GetQuantitativeCumulativeSum(objActivityDataCollectionDetails, lstActivitySurveyResponse1, lstActivitySurveyResponse, joinedBeneficiaryQuestionID, SurveyTarget, lstBeneficiarySurveyResponse, additionalSurveyQuestionId, additionalQuestionType);
                        //}
                        //else if (logicType == (int)OutPutLogicType.Count_of_Unique_Reponses)
                        //{
                        //    result = GetQuantitativeUniqueResponses(objActivityDataCollectionDetails, lstActivitySurveyResponse1, lstActivitySurveyResponse, joinedBeneficiaryQuestionID, SurveyTarget, lstBeneficiarySurveyResponse);
                        //}
                        //else
                        //{
                        //    double totDays = (objActivityDataCollectionDetails[0].EndDate - objActivityDataCollectionDetails[0].StartDate).TotalDays;
                        //    double totDaysFnished = (DateTime.Now - objActivityDataCollectionDetails[0].StartDate).TotalDays;
                        //    result = (int)((totDaysFnished * 100) / totDays);
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result;
        }

        /// <summary>
        /// GetQuantitativeData
        /// </summary>
        /// <param name="activityID"></param>
        /// <returns></returns>
        public List<OutPutQuantitativeLogic> GetQuantitativeData(int activityID)
        {
            List<OutPutQuantitativeLogic> lstOutPutQuantitativeLogic = new List<OutPutQuantitativeLogic>();
            string query = string.Empty;

            using (_connection = Utils.Database.GetDBConnection())
            {
                query = "select tt.ID,tt.ActivityId,tt.SurveyId,tt.SectionId,tt.QuestionID AS QuestionId,tt.BeneficiaryQuestionID as BeneficiaryTypeQstnID,SRV.SurveyName,SCT.SectionName,QST.QuestionName,CASE WHEN  IFNULL(tt.TypeofLogic,1) =0 THEN  1 ELSE IFNULL(tt.TypeofLogic,1) END AS TypeofLogic";
                query += " FROM TbOutputSurveyCollection tt JOIN TbProjectSurvey SRV ON tt.SurveyId= SRV.SurveyID ";
                query += "JOIN TbProjectSurveySection SCT ON tt.SectionId = SCT.SectionID JOIN TbProjectSurveyQuestion QST ON tt.QuestionId = QST.QuestionID ";
                query += "WHERE  tt.ActivityId = @ActivityId and ifnull(tt.IsActive,0) = 1 AND tt.QuestionID >0";
                query += " UNION ";
                query += " select tt.ID,tt.ActivityId,tt.SurveyId,tt.SectionId,tt.QuestionID AS QuestionId,tt.BeneficiaryQuestionID as BeneficiaryTypeQstnID,SRV.SurveyName,CONCAT(BTTYPE.Name,' - Beneficiary Registration Form')  AS SectionName, ";
                query += " BTQST.QuestionName,CASE WHEN  IFNULL(tt.TypeofLogic,1) =0 THEN  1 ELSE IFNULL(tt.TypeofLogic,1) END AS TypeofLogic";
                query += " FROM TbOutputSurveyCollection tt JOIN TbProjectSurvey SRV ON tt.SurveyId= SRV.SurveyID ";
                query += " JOIN TbBeneficiaryTypeQuestion BTQST ON BTQST.QuestionID = tt.BeneficiaryQuestionID ";
                query += " JOIN TbProjectBeneficiaryType BTTYPE ON BTTYPE.BeneficiaryTypeID = BTQST.BeneficiaryTypeID";
                query += " WHERE  tt.ActivityId = @ActivityId and ifnull(tt.IsActive,0) = 1 AND tt.BeneficiaryQuestionID >0";

                lstOutPutQuantitativeLogic = _connection.Query<OutPutQuantitativeLogic>(query, new { ActivityId = activityID }).ToList();

                string qrySurveyLogic = "SELECT SurveyCollectionID,SurveyLogic SurveyLogicPrime,SurveyAnswer SurveyLogicPrimeAnswer,LGType.Type SurveyLogicPrimeType,LG.LogicCondition SurveyLogicCondition FROM TbOutputSurveyLogic  LG JOIN ";
                qrySurveyLogic += "TbLogicType LGType ON LGType.ID = LG.SurveyLogic WHERE IFNULL(LG.IsActive,0) = 1 AND  LG.SurveyCollectionID = @SurveyCollectionID";

                if (lstOutPutQuantitativeLogic != null && lstOutPutQuantitativeLogic.Count > 0)
                {
                    foreach (var itm in lstOutPutQuantitativeLogic)
                    {
                        itm.lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();
                        itm.lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(qrySurveyLogic, new { SurveyCollectionID = itm.ID }).ToList();
                    }
                }
            }

            return lstOutPutQuantitativeLogic;
        }

        #region GetQuantitativeAverage
        /// <summary>
        /// GetQuantitativeAverage
        /// </summary>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="lstActivitySurveyResponse1"></param>
        /// <param name="lstActivitySurveyResponse"></param>
        /// <param name="joinedBeneficiaryQuestionID"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <returns></returns>
        public double GetQuantitativeAverage(List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, List<ActivitySurveyResponse> lstActivitySurveyResponse1, List<ActivitySurveyResponse> lstActivitySurveyResponse, string joinedBeneficiaryQuestionID, string SurveyTarget, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false)
        {
            string query = string.Empty;
            string query1 = string.Empty;
            double result = 0;
            double progressPercentage = 0;
            List<OutPutCount> lstOutPutCount = new List<OutPutCount>();

            List<ActivitySurveyResponse> lstBeneficiarySurveyResponseAll = new List<ActivitySurveyResponse>();

            List<BeneficiaryResponse> lstBeneficiaryResponse = null;
            lstBeneficiaryResponse = new List<BeneficiaryResponse>();
            List<OutPutQuestionRSP> lstOutPutQuestionRSP2 = new List<OutPutQuestionRSP>();
            List<ActivitySurveyResponse> lstActivitySurveyResponse5 = new List<ActivitySurveyResponse>();

            for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
            {
                OutPutCount objOutPutCount = new OutPutCount();

                string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID and ifnull(srvCollection.TypeofLogic,1) = 1; ";
                List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();

                lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID }).ToList();


                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0) //&& lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
                {
                    //lstBeneficiarySurveyResponse = GetBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, lstBeneficiarySurveyResponse, objActivityDataCollectionDetails[i]);

                    string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SurveyID,";
                    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SyncTaskID ";
                    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID = @BeneficiaryQuestionID and ifnull(reg.IsDeleted,0)=0  ";
                    QSTBenQry += subqury;

                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse1 = new List<ActivitySurveyResponse>();

                    lstBeneficiarySurveyResponse1 = _connection.Query<ActivitySurveyResponse>(QSTBenQry, new { BeneficiaryQuestionID = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyID = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            var mySKUs3 = lstBeneficiarySurveyResponse1.Select(l => l.ResponseID).Distinct().ToList();
                            string joinedResponseID = string.Join(",", mySKUs3);

                            if (!string.IsNullOrEmpty(joinedResponseID))
                            {
                                List<ActivitySurveyResponse> lstBeneficiarySurveyResponse2 = new List<ActivitySurveyResponse>();

                                //string QSTQry4 = "select DISTINCT reg.BeneficiaryID ResponseID,reg.Answer,reg.QuestionID,@SurveyID AS SurveyID,1 AS SubmissionCount from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID  WHERE reg.BeneficiaryID in(" + joinedResponseID + ")  and reg.QuestionID =@QuestionID ";

                                //lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                //if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                //{
                                //    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                //}
                                //else
                                //{
                                string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount from TbProjectSurveyResponses  WHERE ResponseID in(" + joinedResponseID + ")  and QuestionID =@QuestionID and  SurveyID=@SurveyID;";

                                lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                {
                                    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                }
                                //}
                            }
                        }
                    }
                    else
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse1);
                        }
                    }
                }

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstActivitySurveyResponse1.Count > 0)
                {
                    if (objActivityDataCollectionDetails[i].QuestionId > 0)
                    {
                        for (int cnt = 0; cnt < lstActivitySurveyResponse1.Count; cnt++)
                        {
                            List<ActivitySurveyResponse> lstActivitySurveyResponse3 = new List<ActivitySurveyResponse>();
                            lstActivitySurveyResponse3 = lstActivitySurveyResponse.Where(x => x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID && x.QuestionID == objActivityDataCollectionDetails[i].QuestionId).ToList();

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                QSTQry += "QuestionID = @QuestionID and ResponseID=@ResponseID  ";
                                QSTQry += subqury;
                                lstActivitySurveyResponse3 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { QuestionID = objActivityDataCollectionDetails[i].QuestionId, ResponseID = lstActivitySurveyResponse1[cnt].ResponseID }).ToList();

                                if (additionalSurveyQuestionId > 0 && lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                                {
                                    List<ActivitySurveyResponse> lstActivitySurveyResponse4 = new List<ActivitySurveyResponse>();
                                    var mySKUs = lstActivitySurveyResponse3.Select(l => l.SyncTaskID).Distinct().ToList();

                                    string joinedSyncTaskID = string.Join(",", mySKUs);

                                    if (additionalQuestionType.Value)
                                    {
                                        QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                        QSTQry += "ResponseID=@ResponseID  and SyncTaskID in(" + joinedSyncTaskID + ")  and QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        QSTQry = "select RES.ResponseID,reg.Answer,reg.QuestionID,RES.SurveyID,RES.SyncTaskID,ifnull(RES.SubmissionCount,1) SubmissionCount ";
                                        QSTQry += "from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID ";
                                        QSTQry += "JOIN TbProjectSurveyResponses RES ON RES.ResponseID = reg.BeneficiaryID WHERE ifnull(ben.IsActive,0)=1  and ";
                                        QSTQry += "ifnull(RES.IsActive,0)=1 and RES.ResponseID=@ResponseID  and RES.SyncTaskID in(" + joinedSyncTaskID + ")  and reg.QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0 && additionalSurveyQuestionId <= 0)
                            {
                                double sumValue = 0;
                                int cnt1 = 0;

                                for (cnt1 = 0; cnt1 < lstActivitySurveyResponse3.Count; cnt1++)
                                {
                                    sumValue += (lstActivitySurveyResponse3[cnt1].Answer != null && lstActivitySurveyResponse3[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse3[cnt1].Answer) : 0;
                                }

                                if (sumValue > 0 && cnt1 > 0)
                                {
                                    double average = sumValue / cnt1;

                                    BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                    objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse3[0].ResponseID;
                                    objBeneficiaryResponse.Anwer = average;
                                    objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse3[0].SurveyID;
                                    lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                }
                            }
                            else if (additionalSurveyQuestionId > 0)
                            {
                                if (i == objActivityDataCollectionDetails.Count - 1 && cnt == lstActivitySurveyResponse1.Count - 1)
                                {
                                    if (lstActivitySurveyResponse5 != null && lstActivitySurveyResponse5.Count > 0)
                                    {
                                        var mySKUs1 = lstActivitySurveyResponse5.Select(l => l.ResponseID).Distinct().ToList();

                                        string joinedResponseID = string.Join(",", mySKUs1);

                                        if (!string.IsNullOrEmpty(joinedResponseID))
                                        {
                                            string[] splt = joinedResponseID.Split(',');

                                            if (splt != null && splt.Length > 0)
                                            {
                                                foreach (var itm10 in splt)
                                                {
                                                    double sumValue = 0;
                                                    int cnt1 = 0;

                                                    List<ActivitySurveyResponse> lstActivitySurveyResponse6 = new List<ActivitySurveyResponse>();

                                                    lstActivitySurveyResponse6 = lstActivitySurveyResponse5.Where(x => x.ResponseID == Convert.ToInt32(itm10)).ToList();

                                                    if (lstActivitySurveyResponse6 != null && lstActivitySurveyResponse6.Count > 0)
                                                    {
                                                        for (cnt1 = 0; cnt1 < lstActivitySurveyResponse6.Count; cnt1++)
                                                        {
                                                            sumValue += (lstActivitySurveyResponse6[cnt1].Answer != null && lstActivitySurveyResponse6[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse6[cnt1].Answer) : 0;
                                                        }

                                                        if (sumValue > 0 && cnt1 > 0)
                                                        {
                                                            double average = sumValue / cnt1;

                                                            BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                                            objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse6[0].ResponseID;
                                                            objBeneficiaryResponse.Anwer = average;
                                                            objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse6[0].SurveyID;
                                                            lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
                else if (objActivityDataCollectionDetails[i].QuestionId > 0)
                {
                    string subqury = GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                    if (additionalSurveyQuestionId <= 0)
                    {
                        query1 = "SELECT SUM(Answer) AnswerSum,(SELECT COUNT(QuestionID) FROM TbProjectSurveyResponses WHERE QuestionID = resp.QuestionID " + subqury + ") ResponseCount,SurveyID FROM TbProjectSurveyResponses resp WHERE  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1  ";
                        query1 += subqury;
                        query1 += " GROUP BY SurveyID;";

                        objOutPutCount = _connection.Query<OutPutCount>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).FirstOrDefault();
                    }
                    else
                    {
                        List<OutPutQuestionRSP> lstOutPutQuestionRSP = new List<OutPutQuestionRSP>();
                        query1 = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount,SurveyID from TbProjectSurveyResponses where  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1 ";
                        query1 += subqury;

                        lstOutPutQuestionRSP = _connection.Query<OutPutQuestionRSP>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).ToList();

                        if (lstOutPutQuestionRSP != null && lstOutPutQuestionRSP.Count > 0)
                        {
                            var mySKUs = lstOutPutQuestionRSP.Select(l => l.SyncTaskID).Distinct().ToList();
                            string joinedSyncTaskID = string.Join(",", mySKUs);

                            if (joinedSyncTaskID != null && joinedSyncTaskID.Length > 0)
                            {
                                objOutPutCount.SurveyID = lstOutPutQuestionRSP[0].SurveyID;

                                List<OutPutQuestionRSP> lstOutPutQuestionRSP1 = new List<OutPutQuestionRSP>();

                                string QSTQry = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount from TbProjectSurveyResponses where SyncTaskID in(" + joinedSyncTaskID + ") and ifnull(IsActive,0)=1 and QuestionID=@QuestionID;";
                                lstOutPutQuestionRSP1 = _connection.Query<OutPutQuestionRSP>(QSTQry, new { QuestionID = additionalSurveyQuestionId }).ToList();

                                if (lstOutPutQuestionRSP1 != null && lstOutPutQuestionRSP1.Count > 0)
                                {
                                    foreach (var itm in lstOutPutQuestionRSP)
                                    {
                                        if (lstOutPutQuestionRSP2.Count == 0)
                                        {
                                            lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                        }
                                        else
                                        {
                                            OutPutQuestionRSP objOutPutQuestionRSP = new OutPutQuestionRSP();
                                            objOutPutQuestionRSP = lstOutPutQuestionRSP2.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault();

                                            if (objOutPutQuestionRSP == null)
                                            {
                                                lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (i == objActivityDataCollectionDetails.Count - 1 && additionalSurveyQuestionId > 0)
                    {
                        double answerSum = lstOutPutQuestionRSP2.Sum(a => Convert.ToDouble(a.AnswerString));
                        int responseCount = lstOutPutQuestionRSP2.Count(); // lstOutPutQuestionRSP2.Sum(a => a.SubmissionCount);

                        if (answerSum > 0 && responseCount > 0)
                        {
                            objOutPutCount.AnswerSum = answerSum;
                            objOutPutCount.ResponseCount = responseCount;
                        }
                    }

                    if (objOutPutCount != null && objOutPutCount.ResponseCount > 0)
                    {
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0 && lstBeneficiarySurveyResponseAll != null && lstBeneficiarySurveyResponseAll.Count > 0 && lstBeneficiaryResponse.Count == 0)
            {
                List<ActivitySurveyResponse> lstBenActivitySurveyResponse2 = lstBeneficiarySurveyResponseAll.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                for (int cnt10 = 0; cnt10 < lstBenActivitySurveyResponse2.Count; cnt10++)
                {
                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                    lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponseAll.Where(x => x.ResponseID == lstBenActivitySurveyResponse2[cnt10].ResponseID).ToList();
                    if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                    {
                        BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                        objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                        objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                        objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse22.Sum(x => Convert.ToDouble(x.Answer)) / lstBeneficiarySurveyResponse22.Count;
                        lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                    }
                }
            }

            if (lstBeneficiaryResponse != null && lstBeneficiaryResponse.Count > 0)
            {
                List<BeneficiaryResponse> lstBeneficiaryResponse3 = lstBeneficiaryResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                if (lstBeneficiaryResponse3 != null && lstBeneficiaryResponse3.Count > 0)
                {
                    for (int g = 0; g < lstBeneficiaryResponse3.Count; g++)
                    {
                        OutPutCount objOutPutCount = new OutPutCount();
                        objOutPutCount.ResponseCount = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID).Count();
                        double sum = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID && x.Anwer != null).Sum(x => Convert.ToDouble(x.Anwer));
                        objOutPutCount.AnswerSum = (sum / objOutPutCount.ResponseCount);
                        objOutPutCount.SurveyID = lstBeneficiaryResponse[g].SurveyID;
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (lstOutPutCount != null && lstOutPutCount.Count > 0)
            {
                var mySKUs3 = lstOutPutCount.Select(l => l.SurveyID).Distinct().ToList();
                string joinedSurveyId = string.Join(",", mySKUs3);
                double totsum = 0;
                int toCount = 0;
                if (joinedSurveyId != null && joinedSurveyId.Length > 0)
                {
                    string[] spltsurveyId = joinedSurveyId.Split(',');
                    for (int cnt6 = 0; cnt6 < spltsurveyId.Length; cnt6++)
                    {
                        OutPutCount obj1OutPutCount = new OutPutCount();
                        totsum += lstOutPutCount.Where(x => x.SurveyID == Convert.ToInt32(spltsurveyId[cnt6])).Sum(x => x.AnswerSum);
                        toCount += lstOutPutCount.Where(x => x.SurveyID == Convert.ToInt32(spltsurveyId[cnt6])).Sum(x => x.ResponseCount);
                    }
                }

                result = totsum / toCount;
                progressPercentage = result / Convert.ToDouble(SurveyTarget); //(result * 100) / Convert.ToDouble(SurveyTarget);
            }

            return progressPercentage;
        }
        #endregion GetQuantitativeAverage

        #region GetQuantitativeCumulativeSum
        /// <summary>
        /// GetQuantitativeCumulativeSum
        /// </summary>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="lstActivitySurveyResponse1"></param>
        /// <param name="lstActivitySurveyResponse"></param>
        /// <param name="lstOutPutCount"></param>
        /// <param name="joinedBeneficiaryQuestionID"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <returns></returns>
        public double GetQuantitativeCumulativeSum(List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, List<ActivitySurveyResponse> lstActivitySurveyResponse1, List<ActivitySurveyResponse> lstActivitySurveyResponse, string joinedBeneficiaryQuestionID, string SurveyTarget, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false)
        {
            string query = string.Empty;
            string query1 = string.Empty;
            double result = 0;
            List<OutPutCount> lstOutPutCount = new List<OutPutCount>();
            List<BeneficiaryResponse> lstBeneficiaryResponse = new List<BeneficiaryResponse>();

            List<ActivitySurveyResponse> lstBeneficiarySurveyResponseAll = new List<ActivitySurveyResponse>();
            List<OutPutQuestionRSP> lstOutPutQuestionRSP2 = new List<OutPutQuestionRSP>();
            List<ActivitySurveyResponse> lstActivitySurveyResponse5 = new List<ActivitySurveyResponse>();

            for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
            {
                OutPutCount objOutPutCount = new OutPutCount();

                //to get survey prime logic -  starts
                string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition  from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID  and ifnull(srvCollection.TypeofLogic,1) = 1; ";
                List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();
                lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID }).ToList();
                //to get survey prime logic - ends

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0) //&& lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
                {
                    //  lstBeneficiarySurveyResponse = GetBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, lstBeneficiarySurveyResponse, objActivityDataCollectionDetails[i]);

                    string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SurveyID,";
                    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID  limit 1) as SyncTaskID ";
                    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID = @BeneficiaryQuestionID and ifnull(reg.IsDeleted,0)=0  ";
                    QSTBenQry += subqury;

                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse1 = new List<ActivitySurveyResponse>();

                    lstBeneficiarySurveyResponse1 = _connection.Query<ActivitySurveyResponse>(QSTBenQry, new { BeneficiaryQuestionID = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyID = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            var mySKUs3 = lstBeneficiarySurveyResponse1.Select(l => l.ResponseID).Distinct().ToList();
                            string joinedResponseID = string.Join(",", mySKUs3);

                            if (!string.IsNullOrEmpty(joinedResponseID))
                            {
                                List<ActivitySurveyResponse> lstBeneficiarySurveyResponse2 = new List<ActivitySurveyResponse>();

                                //string QSTQry4 = "select DISTINCT reg.BeneficiaryID ResponseID,reg.Answer,reg.QuestionID,@SurveyID AS SurveyID,1 AS SubmissionCount from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID  WHERE reg.BeneficiaryID in(" + joinedResponseID + ")  and reg.QuestionID =@QuestionID ";

                                //lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                //if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                //{
                                //    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                //}
                                //else
                                //{
                                string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount from TbProjectSurveyResponses  WHERE ResponseID in(" + joinedResponseID + ")  and QuestionID =@QuestionID and  SurveyID=@SurveyID;";

                                lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                {
                                    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                }
                                //}
                            }
                        }
                    }
                    else
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse1);
                        }
                    }
                }

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstActivitySurveyResponse1.Count > 0)
                {
                    if (objActivityDataCollectionDetails[i].QuestionId > 0)
                    {
                        for (int cnt = 0; cnt < lstActivitySurveyResponse1.Count; cnt++)
                        {
                            List<ActivitySurveyResponse> lstActivitySurveyResponse3 = new List<ActivitySurveyResponse>();
                            lstActivitySurveyResponse3 = lstActivitySurveyResponse.Where(x => x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID && x.QuestionID == objActivityDataCollectionDetails[i].QuestionId).ToList();

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                // lstActivitySurveyResponse3 = GetNonBeneficiarySurveyLogicQueryNew(lstSurveyPrimeLogic, lstActivitySurveyResponse3, objActivityDataCollectionDetails[i]);

                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                QSTQry += "QuestionID = @QuestionID and ResponseID=@ResponseID  ";
                                QSTQry += subqury;
                                lstActivitySurveyResponse3 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { QuestionID = objActivityDataCollectionDetails[i].QuestionId, ResponseID = lstActivitySurveyResponse1[cnt].ResponseID }).ToList();

                                if (additionalSurveyQuestionId > 0 && lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                                {
                                    List<ActivitySurveyResponse> lstActivitySurveyResponse4 = new List<ActivitySurveyResponse>();
                                    var mySKUs = lstActivitySurveyResponse3.Select(l => l.SyncTaskID).Distinct().ToList();

                                    string joinedSyncTaskID = string.Join(",", mySKUs);

                                    if (additionalQuestionType.Value)
                                    {
                                        QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                        QSTQry += "ResponseID=@ResponseID  and SyncTaskID in(" + joinedSyncTaskID + ")  and QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        QSTQry = "select RES.ResponseID,reg.Answer,reg.QuestionID,RES.SurveyID,RES.SyncTaskID,ifnull(RES.SubmissionCount,1) SubmissionCount ";
                                        QSTQry += "from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID ";
                                        QSTQry += "JOIN TbProjectSurveyResponses RES ON RES.ResponseID = reg.BeneficiaryID WHERE ifnull(ben.IsActive,0)=1  and ";
                                        QSTQry += "ifnull(RES.IsActive,0)=1 and RES.ResponseID=@ResponseID  and RES.SyncTaskID in(" + joinedSyncTaskID + ")  and reg.QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0 && additionalSurveyQuestionId <= 0)
                            {
                                double sumValue = 0;
                                int cnt1 = 0;

                                for (cnt1 = 0; cnt1 < lstActivitySurveyResponse3.Count; cnt1++)
                                {
                                    sumValue += (lstActivitySurveyResponse3[cnt1].Answer != null && lstActivitySurveyResponse3[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse3[cnt1].Answer) : 0;
                                }

                                if (sumValue > 0)
                                {
                                    BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                    objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse3[0].ResponseID;
                                    objBeneficiaryResponse.Anwer = sumValue;
                                    objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse3[0].SurveyID;
                                    lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                }
                            }
                            else if (additionalSurveyQuestionId > 0)
                            {
                                if (i == objActivityDataCollectionDetails.Count - 1 && cnt == lstActivitySurveyResponse1.Count - 1)
                                {
                                    if (lstActivitySurveyResponse5 != null && lstActivitySurveyResponse5.Count > 0)
                                    {
                                        double sumValue = 0;
                                        int cnt1 = 0;

                                        for (cnt1 = 0; cnt1 < lstActivitySurveyResponse5.Count; cnt1++)
                                        {
                                            sumValue += (lstActivitySurveyResponse5[cnt1].Answer != null && lstActivitySurveyResponse5[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse5[cnt1].Answer) : 0;
                                        }

                                        if (sumValue > 0 && cnt1 > 0)
                                        {
                                            BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                            objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse5[0].ResponseID;
                                            objBeneficiaryResponse.Anwer = sumValue;
                                            objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse5[0].SurveyID;
                                            lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                            lstActivitySurveyResponse5 = new List<ActivitySurveyResponse>();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (objActivityDataCollectionDetails[i].QuestionId > 0)
                {
                    string subQury = GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                    if (additionalSurveyQuestionId <= 0)
                    {
                        query1 = "SELECT SUM(Answer) AnswerSum,(SELECT COUNT(QuestionID) FROM TbProjectSurveyResponses WHERE QuestionID = resp.QuestionID " + subQury + ") ResponseCount,SurveyID FROM TbProjectSurveyResponses resp WHERE  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1  ";
                        query1 += subQury;
                        query1 += " GROUP BY SurveyID;";

                        objOutPutCount = _connection.Query<OutPutCount>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).FirstOrDefault();
                    }
                    else
                    {
                        List<OutPutQuestionRSP> lstOutPutQuestionRSP = new List<OutPutQuestionRSP>();
                        query1 = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount,SurveyID from TbProjectSurveyResponses where  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1 ";
                        query1 += subQury;

                        lstOutPutQuestionRSP = _connection.Query<OutPutQuestionRSP>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).ToList();

                        if (lstOutPutQuestionRSP != null && lstOutPutQuestionRSP.Count > 0)
                        {
                            var mySKUs = lstOutPutQuestionRSP.Select(l => l.SyncTaskID).Distinct().ToList();
                            string joinedSyncTaskID = string.Join(",", mySKUs);

                            if (joinedSyncTaskID != null && joinedSyncTaskID.Length > 0)
                            {
                                objOutPutCount.SurveyID = lstOutPutQuestionRSP[0].SurveyID;

                                List<OutPutQuestionRSP> lstOutPutQuestionRSP1 = new List<OutPutQuestionRSP>();

                                string QSTQry = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount from TbProjectSurveyResponses where SyncTaskID in(" + joinedSyncTaskID + ") and ifnull(IsActive,0)=1 and QuestionID=@QuestionID;";
                                lstOutPutQuestionRSP1 = _connection.Query<OutPutQuestionRSP>(QSTQry, new { QuestionID = additionalSurveyQuestionId }).ToList();

                                if (lstOutPutQuestionRSP1 != null && lstOutPutQuestionRSP1.Count > 0)
                                {
                                    foreach (var itm in lstOutPutQuestionRSP)
                                    {
                                        if (lstOutPutQuestionRSP2.Count == 0)
                                        {
                                            lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                        }
                                        else
                                        {
                                            OutPutQuestionRSP objOutPutQuestionRSP = new OutPutQuestionRSP();
                                            objOutPutQuestionRSP = lstOutPutQuestionRSP2.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault();

                                            if (objOutPutQuestionRSP == null)
                                            {
                                                lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (i == objActivityDataCollectionDetails.Count - 1 && additionalSurveyQuestionId > 0)
                    {
                        double answerSum = lstOutPutQuestionRSP2.Sum(a => Convert.ToDouble(a.AnswerString));

                        if (answerSum > 0)
                        {
                            objOutPutCount.AnswerSum = answerSum;
                        }
                    }

                    if (objOutPutCount != null && objOutPutCount.AnswerSum > 0)
                    {
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0 && lstBeneficiarySurveyResponseAll != null && lstBeneficiarySurveyResponseAll.Count > 0 && lstBeneficiaryResponse.Count == 0)
            {
                List<ActivitySurveyResponse> lstBenActivitySurveyResponse2 = lstBeneficiarySurveyResponseAll.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                for (int cnt10 = 0; cnt10 < lstBenActivitySurveyResponse2.Count; cnt10++)
                {
                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                    lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponseAll.Where(x => x.ResponseID == lstBenActivitySurveyResponse2[cnt10].ResponseID).ToList();
                    if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                    {
                        BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                        objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                        objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                        objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse22.Sum(x => Convert.ToDouble(x.Answer));
                        lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                    }
                }
            }

            if (lstBeneficiaryResponse != null && lstBeneficiaryResponse.Count > 0)
            {
                List<BeneficiaryResponse> lstBeneficiaryResponse3 = lstBeneficiaryResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                if (lstBeneficiaryResponse3 != null && lstBeneficiaryResponse3.Count > 0)
                {
                    for (int g = 0; g < lstBeneficiaryResponse3.Count; g++)
                    {
                        OutPutCount objOutPutCount = new OutPutCount();
                        objOutPutCount.ResponseCount = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID).Count();
                        objOutPutCount.AnswerSum = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID && x.Anwer != null).Sum(x => Convert.ToDouble(x.Anwer));
                        objOutPutCount.SurveyID = lstBeneficiaryResponse[g].SurveyID;
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (lstOutPutCount != null && lstOutPutCount.Count > 0)
            {
                var mySKUs3 = lstOutPutCount.Select(l => l.SurveyID).Distinct().ToList();
                string joinedSurveyId = string.Join(",", mySKUs3);
                double totsum = 0;
                if (joinedSurveyId != null && joinedSurveyId.Length > 0)
                {
                    string[] spltsurveyId = joinedSurveyId.Split(',');
                    for (int cnt6 = 0; cnt6 < spltsurveyId.Length; cnt6++)
                    {
                        OutPutCount obj1OutPutCount = new OutPutCount();
                        totsum += lstOutPutCount.Where(x => x.SurveyID == Convert.ToDouble(spltsurveyId[cnt6])).Sum(x => x.AnswerSum);
                    }
                }

                result = totsum / Convert.ToDouble(SurveyTarget); //(totsum * 100) / Convert.ToDouble(SurveyTarget);
            }

            return result;
        }
        #endregion GetQuantitativeCumulativeSum


        #region GetQuantitativeUniqueResponses
        /// <summary>
        /// GetQuantitativeUniqueResponses
        /// </summary>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="lstActivitySurveyResponse1"></param>
        /// <param name="lstActivitySurveyResponse"></param>
        /// <param name="lstOutPutCount"></param>
        /// <param name="joinedBeneficiaryQuestionID"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <returns></returns>
        public double GetQuantitativeUniqueResponses(List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, List<ActivitySurveyResponse> lstActivitySurveyResponse1, List<ActivitySurveyResponse> lstActivitySurveyResponse, string joinedBeneficiaryQuestionID, string SurveyTarget, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse)
        {
            string query = string.Empty;
            string query1 = string.Empty;
            double result = 0;
            List<OutPutCount> lstOutPutCount = new List<OutPutCount>();

            List<BeneficiaryResponse> lstBeneficiaryResponse = new List<BeneficiaryResponse>();

            List<ActivitySurveyResponse> lstBeneficiarySurveyResponseAll = new List<ActivitySurveyResponse>();

            for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
            {
                OutPutCount objOutPutCount = new OutPutCount();

                //to get survey prime logic - starts
                string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID and ifnull(srvCollection.TypeofLogic,1) = 1;; ";
                List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();
                lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID }).ToList();
                //to get survey prime logic - ends

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0) //&& lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
                {
                    //  lstBeneficiarySurveyResponse = GetBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, lstBeneficiarySurveyResponse, objActivityDataCollectionDetails[i]);

                    string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SurveyID,";
                    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SyncTaskID ";
                    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID = @BeneficiaryQuestionID and ifnull(reg.IsDeleted,0)=0  ";
                    QSTBenQry += subqury;

                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse1 = new List<ActivitySurveyResponse>();

                    lstBeneficiarySurveyResponse1 = _connection.Query<ActivitySurveyResponse>(QSTBenQry, new { BeneficiaryQuestionID = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyID = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                    if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                    {
                        lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse1);
                    }
                }

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstActivitySurveyResponse1.Count > 0)
                {
                    if (objActivityDataCollectionDetails[i].QuestionId > 0)
                    {
                        for (int cnt = 0; cnt < lstActivitySurveyResponse1.Count; cnt++)
                        {
                            List<ActivitySurveyResponse> lstActivitySurveyResponse3 = new List<ActivitySurveyResponse>();
                            lstActivitySurveyResponse3 = lstActivitySurveyResponse.Where(x => x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID && x.QuestionID == objActivityDataCollectionDetails[i].QuestionId).ToList();

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                //  lstActivitySurveyResponse3 = GetNonBeneficiarySurveyLogicQueryNew(lstSurveyPrimeLogic, lstActivitySurveyResponse3, objActivityDataCollectionDetails[i]);

                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                QSTQry += "QuestionID = @QuestionID and ResponseID=@ResponseID  ";
                                QSTQry += subqury;
                                lstActivitySurveyResponse3 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { QuestionID = objActivityDataCollectionDetails[i].QuestionId, ResponseID = lstActivitySurveyResponse1[cnt].ResponseID }).ToList();
                            }

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                lstActivitySurveyResponse3 = lstActivitySurveyResponse3.GroupBy(x => x.Answer).Select(x => x.First()).ToList();

                                BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse3[0].ResponseID;
                                objBeneficiaryResponse.Anwer = lstActivitySurveyResponse3.Count;
                                objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse3[0].SurveyID;
                                lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                            }
                        }
                    }
                }
                else if (objActivityDataCollectionDetails[i].QuestionId > 0)
                {
                    query1 = " SELECT COUNT(Answer) AnswerSum,0 AS ResponseCount,max(SurveyID) SurveyID";
                    query1 += " FROM TbProjectSurveyResponses WHERE QuestionID =  @QuestionId AND ifnull(IsActive,0) = 1  ";
                    query1 += GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);
                    query1 += " GROUP BY QuestionID;";

                    objOutPutCount = _connection.Query<OutPutCount>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).FirstOrDefault();

                    if (objOutPutCount != null)
                    {
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0 && lstBeneficiarySurveyResponseAll != null && lstBeneficiarySurveyResponseAll.Count > 0)
            {
                //List<ActivitySurveyResponse> lstBenActivitySurveyResponse2 = lstBeneficiarySurveyResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                //for (int cnt10 = 0; cnt10 < lstBenActivitySurveyResponse2.Count; cnt10++)
                //{
                //    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                //    lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponse.Where(x => x.ResponseID == lstBenActivitySurveyResponse2[cnt10].ResponseID).ToList();

                //    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse23 = new List<ActivitySurveyResponse>();
                //    lstBeneficiarySurveyResponse23 = lstBeneficiarySurveyResponse22.GroupBy(x => x.Answer).Select(x => x.First()).ToList();

                //    if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                //    {
                //        BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                //        objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                //        objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                //        objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse23.Count();
                //        lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                //    }
                //}

                //if(lstBenActivitySurveyResponse2 != null && lstBenActivitySurveyResponse2.Count >0)
                //{
                List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponseAll.GroupBy(x => x.Answer).Select(x => x.First()).ToList();

                //if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                //{
                //    BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                //    objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                //    objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                //    objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse22.Count();
                //    lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                //}

                foreach (var itm in lstBeneficiarySurveyResponseAll)
                {
                    BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                    objBeneficiaryResponse1.ResponseID = itm.ResponseID;
                    objBeneficiaryResponse1.SurveyID = itm.SurveyID;
                    objBeneficiaryResponse1.Anwer = 1;
                    lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                }

                // }

            }

            if (lstBeneficiaryResponse != null && lstBeneficiaryResponse.Count > 0)
            {
                List<BeneficiaryResponse> lstBeneficiaryResponse3 = lstBeneficiaryResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                if (lstBeneficiaryResponse3 != null && lstBeneficiaryResponse3.Count > 0)
                {
                    for (int g = 0; g < lstBeneficiaryResponse3.Count; g++)
                    {
                        OutPutCount objOutPutCount = new OutPutCount();
                        objOutPutCount.ResponseCount = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID).Count();
                        objOutPutCount.AnswerSum = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID && x.Anwer != null).Sum(x => Convert.ToInt32(x.Anwer));
                        objOutPutCount.SurveyID = lstBeneficiaryResponse[g].SurveyID;
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (lstOutPutCount != null && lstOutPutCount.Count > 0)
            {
                var mySKUs3 = lstOutPutCount.Select(l => l.SurveyID).Distinct().ToList();
                string joinedSurveyId = string.Join(",", mySKUs3);
                double totsum = 0;
                if (joinedSurveyId != null && joinedSurveyId.Length > 0)
                {
                    string[] spltsurveyId = joinedSurveyId.Split(',');
                    for (int cnt6 = 0; cnt6 < spltsurveyId.Length; cnt6++)
                    {
                        OutPutCount obj1OutPutCount = new OutPutCount();
                        totsum += lstOutPutCount.Where(x => x.SurveyID == Convert.ToDouble(spltsurveyId[cnt6])).Sum(x => x.AnswerSum);
                    }
                }

                result = totsum / Convert.ToDouble(SurveyTarget);// (totsum * 100) / Convert.ToDouble(SurveyTarget);
            }

            return result;
        }
        #endregion GetQuantitativeUniqueResponses

        #region GetNonBeneficiarySurveyLogicQuery
        /// <summary>
        /// GetNonBeneficiarySurveyLogicQuery
        /// </summary>
        /// <param name="lstSurveyPrimeLogic"></param>
        /// <returns></returns>
        public string GetNonBeneficiarySurveyLogicQuery(List<SurveyPrimeLogic> lstSurveyPrimeLogic, int answerType)
        {
            string query1 = String.Empty;

            if (lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
            {
                int PrimeLogicCount = 0;

                query1 = " and ( ";

                foreach (var itm in lstSurveyPrimeLogic)
                {
                    PrimeLogicCount++;

                    if (answerType == (int)CommonActivity.QuestionType.Date)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') = DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 4:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') > DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 5:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') >= DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 6:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') < DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 7:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') <= DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 8:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') != DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                        }
                    }
                    else if (answerType == (int)CommonActivity.QuestionType.MultiChoice)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(Answer) like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                            case 8:
                                query1 += " TRIM(Answer) not like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                        }
                    }
                    else
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(Answer) = '" + itm.SurveyLogicPrimeAnswer + "'";
                                break;
                            case 4:
                                query1 += " Answer > " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 5:
                                query1 += " Answer >= " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 6:
                                query1 += " Answer < " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 7:
                                query1 += " Answer <= " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 8:
                                query1 += " TRIM(Answer) != '" + itm.SurveyLogicPrimeAnswer + "'";
                                break;
                        }
                    }

                    if (PrimeLogicCount < lstSurveyPrimeLogic.Count)
                    {
                        query1 += (itm.SurveyLogicCondition == 2 ? " OR " : " AND ");
                    }
                }

                query1 += " )";
            }

            return query1;
        }
        #endregion GetNonBeneficiarySurveyLogicQuery

        #region GetBeneficiarySurveyLogicQuery
        /// <summary>
        /// GetBeneficiarySurveyLogicQuery
        /// </summary>
        /// <param name="lstSurveyPrimeLogic"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <returns></returns>
        public List<ActivitySurveyResponse> GetBeneficiarySurveyLogicQuery(List<SurveyPrimeLogic> lstSurveyPrimeLogic, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, ActivityDataCollectionDetails objActivityDataCollectionDetails)
        {
            if (lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0)
            {
                foreach (var itm in lstSurveyPrimeLogic)
                {
                    switch (itm.SurveyLogicPrime)
                    {
                        case 3:
                            lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => x.Answer.Trim() == itm.SurveyLogicPrimeAnswer && x.QuestionID == objActivityDataCollectionDetails.BeneficiaryQuestionID).ToList();
                            break;
                        case 4:
                            lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) > Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.BeneficiaryQuestionID).ToList();
                            break;
                        case 5:
                            lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) >= Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.BeneficiaryQuestionID).ToList();
                            break;
                        case 6:
                            lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) < Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.BeneficiaryQuestionID).ToList();
                            break;
                        case 7:
                            lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) <= Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.BeneficiaryQuestionID).ToList();
                            break;
                        case 8:
                            lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => x.Answer.Trim() != itm.SurveyLogicPrimeAnswer && x.QuestionID == objActivityDataCollectionDetails.BeneficiaryQuestionID).ToList();
                            break;
                    }
                }
            }
            return lstBeneficiarySurveyResponse;
        }
        #endregion GetBeneficiarySurveyLogicQuery

        #region GetNonBeneficiarySurveyLogicQueryNew
        /// <summary>
        /// GetBeneficiarySurveyLogicQuery
        /// </summary>
        /// <param name="lstSurveyPrimeLogic"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <returns></returns>
        public List<ActivitySurveyResponse> GetNonBeneficiarySurveyLogicQueryNew(List<SurveyPrimeLogic> lstSurveyPrimeLogic, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, ActivityDataCollectionDetails objActivityDataCollectionDetails)
        {
            foreach (var itm in lstSurveyPrimeLogic)
            {
                switch (itm.SurveyLogicPrime)
                {
                    case 3:
                        lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => x.Answer.Trim() == itm.SurveyLogicPrimeAnswer && x.QuestionID == objActivityDataCollectionDetails.QuestionId).ToList();
                        break;
                    case 4:
                        lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) > Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.QuestionId).ToList();
                        break;
                    case 5:
                        lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) >= Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.QuestionId).ToList();
                        break;
                    case 6:
                        lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) < Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.QuestionId).ToList();
                        break;
                    case 7:
                        lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => Convert.ToDecimal(x.Answer) <= Convert.ToDecimal(itm.SurveyLogicPrimeAnswer) && x.QuestionID == objActivityDataCollectionDetails.QuestionId).ToList();
                        break;
                    case 8:
                        lstBeneficiarySurveyResponse = lstBeneficiarySurveyResponse.Where(x => x.Answer.Trim() != itm.SurveyLogicPrimeAnswer && x.QuestionID == objActivityDataCollectionDetails.QuestionId).ToList();
                        break;
                }
            }

            return lstBeneficiarySurveyResponse;
        }
        #endregion GetNonBeneficiarySurveyLogicQueryNew

        #region GetOutputSurveyIds
        /// <summary>
        /// GetOutputSurveyIds
        /// </summary>
        /// <param name="activityId"></param>
        /// <returns></returns>
        public string GetOutputSurveyIds(int activityId = 0)
        {
            string surveyIds = "";
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string strQuery = @"select GROUP_CONCAT(distinct SurveyId) from TbOutputSurveyCollection where ActivityId = @ActivityId and ifnull(IsActive,0) = 1 GROUP BY ActivityId;";
                    surveyIds = _connection.Query<string>(strQuery, new { ActivityId = activityId }).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return surveyIds;
        }
        #endregion GetNonBeneficiarySurveyLogicQuery

        #region GetOutputPivotPresetList
        /// <summary>
        /// GetOutputPivotPresetList
        /// </summary>
        /// <param name="UserID"></param>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public List<OutputPivotPresetData> GetOutputPivotPresetList(int UserID, int ActivityId)
        {
            List<OutputPivotPresetData> pivotList = new List<OutputPivotPresetData>();
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string query = "SELECT PresetName,PresetData,IFNULL(SectionId,0) SectionId FROM TbOutputPivotPresetData WHERE UserID = @UserID AND ActivityID=@ActivityID;";
                    pivotList = _connection.Query<OutputPivotPresetData>(query, new { UserID = UserID, ActivityID = ActivityId }).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return pivotList;
        }
        #endregion GetOutputPivotPresetList

        #region SaveOutputPivotPreset
        /// <summary>
        /// SaveOutputPivotPreset
        /// </summary>
        /// <param name="UserID"></param>
        /// <param name="PresetName"></param>
        /// <param name="ActivityId"></param>
        /// <param name="PresetData"></param>
        /// <returns></returns>
        public bool SaveOutputPivotPreset(int UserID, string PresetName, int ActivityId, string PresetData, int SectionId = 0)
        {
            bool status = false;
            string strQuery = string.Empty;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    strQuery = @"INSERT INTO TbOutputPivotPresetData(UserID,PresetName,ActivityID,PresetData,CreatedDate,CreatedBy,SectionId) 
                                     VALUES (@UserID,@PresetName,@ActivityID,@PresetData,now(),@UserID,@SectionId); ";

                    _connection.Execute(strQuery, new
                    {
                        UserID = UserID,
                        PresetName = PresetName,
                        ActivityID = ActivityId,
                        PresetData = PresetData,
                        SectionId = SectionId
                    });

                    status = true;
                }
            }
            catch (Exception ex)
            {

            }

            return status;
        }
        #endregion SaveOutputPivotPreset

        #region RestoreOutputPivotPreset
        /// <summary>
        /// RestoreOutputPivotPreset
        /// </summary>
        /// <param name="UserID"></param>
        /// <param name="PresetName"></param>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public string RestoreOutputPivotPreset(int UserID, string PresetName, int ActivityId)
        {
            string presetData = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string query = "SELECT PresetData FROM TbOutputPivotPresetData WHERE UserID = @UserID AND PresetName = @PresetName AND ActivityID=@ActivityID;";
                    presetData = _connection.Query<string>(query, new { UserID = UserID, PresetName = PresetName, ActivityID = ActivityId }).FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
            }
            return presetData;
        }
        #endregion RestoreOutputPivotPreset

        #region EditOutputPivotPreset
        /// <summary>
        /// EditOutputPivotPreset
        /// </summary>
        /// <param name="UserID"></param>
        /// <param name="PresetName"></param>
        /// <param name="ActivityId"></param>
        /// <param name="PresetData"></param>
        /// <returns></returns>
        public bool EditOutputPivotPreset(int UserID, string PresetName, int ActivityId, string PresetData)
        {
            bool status = false;
            string strQuery = string.Empty;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    strQuery = @"UPDATE TbOutputPivotPresetData SET  PresetData = @PresetData,UpdatedDate = now(),UpdatedBy = @UserID
                                     WHERE UserID = @UserID AND PresetName = @PresetName AND ActivityID=@ActivityID; ";

                    _connection.Execute(strQuery, new
                    {
                        UserID = UserID,
                        PresetName = PresetName,
                        ActivityID = ActivityId,
                        PresetData = PresetData
                    });

                    status = true;
                }
            }
            catch (Exception ex)
            {
            }

            return status;
        }
        #endregion EditOutputPivotPreset

        #region DeleteOutputPivotPreset
        /// <summary>
        /// DeleteOutputPivotPreset
        /// </summary>
        /// <param name="UserID"></param>
        /// <param name="PresetName"></param>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public bool DeleteOutputPivotPreset(int UserID, string PresetName, int ActivityId)
        {
            bool status = false;
            string strQuery = string.Empty;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    strQuery = @"DELETE FROM TbOutputPivotPresetData WHERE UserID = @UserID AND PresetName = @PresetName AND ActivityID=@ActivityID;";

                    _connection.Execute(strQuery, new
                    {
                        UserID = UserID,
                        PresetName = PresetName,
                        ActivityID = ActivityId
                    });

                    status = true;
                }
            }
            catch (Exception ex)
            {
            }

            return status;
        }
        #endregion DeleteOutputPivotPreset

        #region GetBeneficiarySurveyLogicQuery2
        /// <summary>
        /// GetBeneficiarySurveyLogicQuery2
        /// </summary>
        /// <param name="lstSurveyPrimeLogic"></param>
        /// <returns></returns>
        public string GetBeneficiarySurveyLogicQuery2(List<SurveyPrimeLogic> lstSurveyPrimeLogic, int answerType)
        {
            string query1 = String.Empty;

            if (lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
            {
                int PrimeLogicCount = 0;

                query1 = " and ( ";

                foreach (var itm in lstSurveyPrimeLogic)
                {
                    PrimeLogicCount++;

                    if (answerType == (int)CommonActivity.QuestionType.Date)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += "STR_TO_DATE(reg.Answer, '%m/%d/%Y') = DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 4:
                                query1 += "STR_TO_DATE(reg.Answer, '%m/%d/%Y') > DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 5:
                                query1 += "STR_TO_DATE(reg.Answer, '%m/%d/%Y') >= DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 6:
                                query1 += "STR_TO_DATE(reg.Answer, '%m/%d/%Y') < DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 7:
                                query1 += "STR_TO_DATE(reg.Answer, '%m/%d/%Y') <= DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 8:
                                query1 += "STR_TO_DATE(reg.Answer, '%m/%d/%Y') != DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                        }
                    }
                    else if (answerType == (int)CommonActivity.QuestionType.BenMultiChoice)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(reg.Answer) like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                            case 8:
                                query1 += " TRIM(reg.Answer) not like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                        }
                    }
                    else if (answerType == (int)CommonActivity.QuestionType.CascadingDropdown)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(reg.Answer) like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                            case 8:
                                query1 += " TRIM(reg.Answer) not like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                        }
                    }
                    else
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(reg.Answer) = '" + itm.SurveyLogicPrimeAnswer + "'";
                                break;
                            case 4:
                                query1 += " reg.Answer > " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 5:
                                query1 += " reg.Answer >= " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 6:
                                query1 += " reg.Answer < " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 7:
                                query1 += " reg.Answer <= " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 8:
                                query1 += " TRIM(reg.Answer) != '" + itm.SurveyLogicPrimeAnswer + "'";
                                break;
                        }
                    }

                    if (PrimeLogicCount < lstSurveyPrimeLogic.Count)
                    {
                        query1 += (itm.SurveyLogicCondition == 2 ? " OR " : " AND ");
                    }
                }

                query1 += " )";
            }

            return query1;
        }
        #endregion GetBeneficiarySurveyLogicQuery2

        #region GetBeneficiarySurveyResponseLogicQuery
        /// <summary>
        /// GetBeneficiarySurveyResponseLogicQuery
        /// </summary>
        /// <param name="lstSurveyPrimeLogic"></param>
        /// <returns></returns>
        public string GetBeneficiarySurveyResponseLogicQuery(List<SurveyPrimeLogic> lstSurveyPrimeLogic, int answerType)
        {
            string query1 = String.Empty;

            if (lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
            {
                int PrimeLogicCount = 0;

                query1 = " and ( ";

                foreach (var itm in lstSurveyPrimeLogic)
                {
                    PrimeLogicCount++;

                    if (answerType == (int)CommonActivity.QuestionType.Date)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') = DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 4:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') > DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 5:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') >= DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 6:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') < DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 7:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') <= DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                            case 8:
                                query1 += "STR_TO_DATE(Answer, '%m/%d/%Y') != DATE('" + itm.SurveyLogicPrimeAnswer + "')";
                                break;
                        }
                    }
                    else if (answerType == (int)CommonActivity.QuestionType.MultiChoice)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(Answer) like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                            case 8:
                                query1 += " TRIM(Answer) not like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                        }
                    }
                    else if (answerType == (int)CommonActivity.QuestionType.CascadingDropdown)
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(Answer) like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                            case 8:
                                query1 += " TRIM(Answer) not like '%" + itm.SurveyLogicPrimeAnswer + "%'";
                                break;
                        }
                    }
                    else
                    {
                        switch (itm.SurveyLogicPrime)
                        {
                            case 3:
                                query1 += " TRIM(Answer) = '" + itm.SurveyLogicPrimeAnswer + "'";
                                break;
                            case 4:
                                query1 += " Answer > " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 5:
                                query1 += " Answer >= " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 6:
                                query1 += " Answer < " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 7:
                                query1 += " Answer <= " + itm.SurveyLogicPrimeAnswer;
                                break;
                            case 8:
                                query1 += " TRIM(Answer) != '" + itm.SurveyLogicPrimeAnswer + "'";
                                break;
                        }
                    }

                    if (PrimeLogicCount < lstSurveyPrimeLogic.Count)
                    {
                        query1 += (itm.SurveyLogicCondition == 2 ? " OR " : " AND ");
                    }
                }

                query1 += " )";
            }

            return query1;
        }
        #endregion GetBeneficiarySurveyResponseLogicQuery

        /// <summary>
        /// Function used to fetch survey question's answers based on QstnID
        /// </summary>
        /// <param name="QstnID"></param>
        /// <returns></returns>
        public IEnumerable<QuestionOptionList> GetBeneficiaryQuestionOption(int QstnID)
        {
            List<QuestionOptionList> lst = new List<QuestionOptionList>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    strQuery = @"Select QstnAnsOptionID as OptionID,OptionValue From TbBeneficiaryTypeQstnAnswerOptions Where QuestionID=@QuestionID ";
                    lst = _connection.Query<QuestionOptionList>(strQuery, new { QuestionID = QstnID }).ToList();
                }
            }
            catch (Exception ex)
            {
            }
            return lst;
        }

        #region GetSurveyCascadingList
        /// <summary>
        /// GetSurveyCascadingList
        /// </summary>
        /// <returns></returns>
        public IEnumerable<MyTaskMasterList> GetSurveyCascadingList()
        {
            List<MyTaskMasterList> lstMasterList = new List<MyTaskMasterList>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string strMasterQuery = "SELECT CountryID AS ID,CountryName AS Name,'Country' ItemTable,0 AS ParentID,0 AS CensusCode  FROM  TbCountry";
                    strMasterQuery += " UNION ";
                    strMasterQuery += " SELECT StateID AS ID,StateName AS Name,'State' ItemTable,CountryID AS ParentID, Census_Code AS CensusCode FROM  TbStates ";
                    strMasterQuery += " UNION ";
                    strMasterQuery += " SELECT DistrictID AS ID,DistrictName AS Name,'District' ItemTable, StateID AS ParentID,Census_Code AS CensusCode FROM TbDistrict ";
                    strMasterQuery += " UNION ";
                    strMasterQuery += " SELECT SubDistrictID AS ID,SubDistrictName AS Name,'SubDistrict' ItemTable,DistrictID  AS ParentID,Census_Code AS CensusCode FROM TbSubDistrict ";

                    lstMasterList = _connection.Query<MyTaskMasterList>(strMasterQuery).ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return lstMasterList;
        }
        #endregion GetSurveyCascadingList

        #region GetBeneficiaryCascadingList
        /// <summary>
        ///GetBeneficiaryCascadingList
        /// </summary>
        /// <param name="QuestionID"></param>
        /// <returns></returns>
        public IEnumerable<MyTaskSurveyCascadingQuestionOptions> GetCascadingHeirarchyList(int QuestionID, bool isBeneficiary)
        {
            List<MyTaskSurveyCascadingQuestionOptions> lstBeneficiaryCascadingQstnOptions = new List<MyTaskSurveyCascadingQuestionOptions>();
            string strQuery = string.Empty;
            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {

                    if (!isBeneficiary)
                    {
                        string strTbBeneficiaryCascadingQstnOptions = "SELECT DISTINCT BenCascade.OptionGroupID,BenCascade.OptionValue,BenCascade.HierarchyOrder,BenCascade.TableName,BenCascade.ColumnName,";
                        strTbBeneficiaryCascadingQstnOptions += " BenCascade.PrimaryColumn,BenCascade.ParentItemColumn FROM TbBeneficiaryCascadingQstnOptions BenCascade ";
                        strTbBeneficiaryCascadingQstnOptions += " JOIN TbProjectSurveyQSTOption QSTOPT ON BenCascade.OptionValue = QSTOPT.OptionValue WHERE IFNULL(BenCascade.IsDeleted,0) = 0 AND QSTOPT.QuestionID = @QuestionID";
                        lstBeneficiaryCascadingQstnOptions = _connection.Query<MyTaskSurveyCascadingQuestionOptions>(strTbBeneficiaryCascadingQstnOptions, new { QuestionID = QuestionID }).ToList();
                    }
                    else
                    {
                        string strTbBeneficiaryCascadingQstnOptions = "SELECT DISTINCT BenCascade.OptionGroupID,BenCascade.OptionValue,BenCascade.HierarchyOrder,BenCascade.TableName,BenCascade.ColumnName,";
                        strTbBeneficiaryCascadingQstnOptions += " BenCascade.PrimaryColumn,BenCascade.ParentItemColumn FROM TbBeneficiaryCascadingQstnOptions BenCascade ";
                        strTbBeneficiaryCascadingQstnOptions += " JOIN TbBeneficiaryTypeQstnAnswerOptions QSTOPT ON BenCascade.OptionValue = QSTOPT.OptionValue WHERE IFNULL(BenCascade.IsDeleted,0) = 0 AND QSTOPT.QuestionID = @QuestionID";
                        lstBeneficiaryCascadingQstnOptions = _connection.Query<MyTaskSurveyCascadingQuestionOptions>(strTbBeneficiaryCascadingQstnOptions, new { QuestionID = QuestionID }).ToList();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return lstBeneficiaryCascadingQstnOptions;
        }
        #endregion GetSurveyCascadingList


        #region GetProjectActivityData
        /// <summary>
        /// Function used to fetch activity data based on ProjectId,mStartDate,mEndDate
        /// </summary>
        /// <param name="ProjectId"></param>
        /// <param name="mStartDate"></param>
        /// <param name="mEndDate"></param>
        /// <returns></returns>
        public List<KeyValuePair<int, string>> GetProjectActivityData(int ProjectId = 0, DateTime? mStartDate = null, DateTime? mEndDate = null)
        {
            List<KeyValuePair<int, string>> lstactivity = new List<KeyValuePair<int, string>>();
            dynamic obj;
            try
            {
                if (ProjectId != 0)
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        string query = @"SELECT t.ActivityId,t.ActivityName from TbProjectActivity t  WHERE ParentActivityId != 0 and t.ProjectId = @ProjectId";
                        if ((mStartDate != null) && (mEndDate != null))
                        {
                            query += " AND t.StartDate between @mStartDate and @mEndDate";
                        }
                        query += " AND IFNULL(t.IsDeleted,0)=0;";
                        obj = _connection.Query<object>(query, new { ProjectId = ProjectId, mStartDate = mStartDate, mEndDate = mEndDate }).ToList();

                        foreach (dynamic item in obj)
                        {
                            lstactivity.Add(new KeyValuePair<int, string>(item.ActivityId, item.ActivityName));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return lstactivity;
        }
        #endregion GetProjectActivityData  

        #region GetOutPutCountByProjectId
        /// <summary>
        /// GetOutPutCountByProjectId
        /// </summary>
        /// <param name="ProjectId"></param>
        /// <returns></returns>
        public OutputOverview GetOutPutCountByProjectId(int ProjectId = 0)
        {
            OutputOverview objOutputOverview = new OutputOverview();
            string stringifydate = string.Empty;

            try
            {
                if (ProjectId != 0)
                {
                    List<OutputOverview> lstOutputOverview = new List<OutputOverview>();

                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        string query = "select ifnull(ActivityProgress,0) as ActivityProgress from TbProjectActivity where ifnull(IsDeleted,0) = @IsDeleted and ProjectId = @ProjectId";
                        query += " and ActivityId not in (select ParentActivityId from TbProjectActivity where ifnull(IsDeleted,0) = @IsDeleted and ProjectId = @ProjectId)";
                        lstOutputOverview = _connection.Query<OutputOverview>(query, new { IsDeleted = 0, ProjectId = ProjectId }).ToList();

                        string strQueryexec = @"SELECT  ifnull(DATE_FORMAT(ExecutedDateTime, '%Y-%m-%d %H:%i:%s'),'')  From TbOutputScheduler order by ID desc limit 1";
                        stringifydate = _connection.Query<string>(strQueryexec).FirstOrDefault();
                    }

                    if (stringifydate != null && stringifydate.Length > 0)
                    {
                        objOutputOverview.LastExecutedDateTime = stringifydate;
                    }

                    if (lstOutputOverview != null && lstOutputOverview.Count > 0)
                    {
                        objOutputOverview.TotalCount = lstOutputOverview.Count();
                        objOutputOverview.CompletedCount = lstOutputOverview.Where(p => p.ActivityProgress >= 100).Count();
                        objOutputOverview.PendingCount = objOutputOverview.TotalCount - objOutputOverview.CompletedCount;
                    }
                }
            }
            catch (Exception ex)
            {
            }
            return objOutputOverview;
        }
        #endregion GetOutPutCountByProjectId   

        #region GetSurveyCollectionBySurveyIds
        /// <summary>
        /// GetSurveyCollectionBySurveyIds
        /// </summary>
        /// <param name="ProjectId"></param>
        /// <returns></returns>
        public List<ProjectSurveyCollection> GetSurveyCollectionBySurveyIds(int ProjectId = 0, string surveyIds = "")
        {
            List<ProjectSurveyCollection> lsSurveyCollection = new();
            List<ProjectSurveyCollection> lsNewSurveyCollection = new();
            List<ProjectSurveySectionCollection> lstSectionCollection = new();
            List<ProjectSurveySectionCollection> newlstSectionCollection = new();

            string surveys = string.Empty;

            string surveyQuery = string.Empty;
            string sectionQuery = string.Empty;
            string questionQuery = string.Empty;

            int[] surveyArray = JsonConvert.DeserializeObject<int[]>(surveyIds);

            foreach (var item in surveyArray)
            {
                if (surveys.Length > 0)
                {
                    surveys += ",";
                }
                surveys += item.ToString();
            }

            try
            {
                if (ProjectId != 0)
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        surveyQuery = @"SELECT t.SurveyID,t.SurveyName from TbProjectSurvey t WHERE t.SurveyID in (" + surveys + @") AND IFNULL(t.IsActive,0) = 1;";

                        lsSurveyCollection = _connection.Query<ProjectSurveyCollection>(surveyQuery).ToList();

                        foreach (ProjectSurveyCollection survey in lsSurveyCollection)
                        {
                            sectionQuery = @"SELECT Distinct SectionID, SectionName From TbProjectSurveySection Where SurveyID =@SurveyID Order By SectionName ";

                            survey.ProjectSurveySectionList = new List<ProjectSurveySectionCollection>();
                            lstSectionCollection = _connection.Query<ProjectSurveySectionCollection>(sectionQuery, new { SurveyID = survey.SurveyId }).ToList();
                            newlstSectionCollection = new List<ProjectSurveySectionCollection>();

                            foreach (var sections in lstSectionCollection)
                            {
                                questionQuery = @"SELECT Distinct Q.QuestionID, Q.QuestionName From TbProjectSurveyQuestion Q  " +
                                       " Left Join TbQuestionType QT On QT.ID = Q.QuestionTypeID Where Q.IsActive = 1  and Q.SectionID = @SectionID " +
                                       " and QT.Category in (1,2)  and Q.QuestionTypeID  != @QuestionTypeID  Order By Q.QuestionName ";

                                sections.ProjectSurveySectionQuestionsList = new List<ProjectSurveySectionQuestionsCollection>();
                                sections.ProjectSurveySectionQuestionsList = _connection.Query<ProjectSurveySectionQuestionsCollection>
                                    (questionQuery, new { SectionID = sections.SectionId, QuestionTypeID = (int)CommonActivity.QuestionType.Note }).ToList();
                                newlstSectionCollection.Add(sections);
                            }

                            survey.ProjectSurveySectionList = newlstSectionCollection;
                            lsNewSurveyCollection.Add(survey);
                        }

                        lsSurveyCollection = lsNewSurveyCollection;
                    }
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            return lsSurveyCollection;
        }
        #endregion GetSurveyCollectionBySurveyIds  

        #region GetSurveySectionsQuestionsCollectionBySurveyIds
        /// <summary>
        /// GetSurveySectionsQuestionsCollectionBySurveyIds
        /// </summary>
        /// <param name="ProjectId"></param>
        /// <returns></returns>
        public List<ProjectSurveyCollection> GetSurveySectionsQuestionsCollectionBySurveyIds(int ProjectId = 0, string surveyIds = "")
        {
            List<ProjectSurveyCollection> lsSurveyCollection = new();
            List<ProjectSurveyCollection> lsNewSurveyCollection = new();
            string surveys = string.Empty;
            string surveyQuery = string.Empty;

            int[] surveyArray = JsonConvert.DeserializeObject<int[]>(surveyIds);

            foreach (var item in surveyArray)
            {
                if (surveys.Length > 0)
                {
                    surveys += ",";
                }
                surveys += item.ToString();
            }

            try
            {
                if (ProjectId != 0)
                {
                    using (_connection = Utils.Database.GetDBConnection())
                    {
                        surveyQuery = @"SELECT t.SurveyID,t.SurveyName, s.SectionID, s.SectionName, q.QuestionID, q.QuestionName, q.QuestionTypeID, qt.Type, 'Section' as SectionORBeneficiary " +
                                        " FROM TbProjectSurvey t INNER JOIN TbProjectSurveySection s ON t.SurveyID = s.SurveyID INNER JOIN TbProjectSurveyQuestion q on s.SectionID = q.SectionID and q.IsActive = 1 " +
                                        " LEFT JOIN TbQuestionType qt on q.QuestionTypeID = qt.ID and qt.Category in (1,2)  and q.QuestionTypeID  != 14 " +
                                        " WHERE  IFNULL(t.IsActive,0) = 1 AND t.SurveyID IN (" + surveys + @")" +
                                        " UNION SELECT t.SurveyID, t.SurveyName, bt.BeneficiaryTypeID as SectionID, CONCAT((bt.Name), ' - ' ,'Beneficiary Registration form') SectionName, " +
                                        " btq.QuestionID, btq.QuestionName, btq.AnswerTypeID QuestionTypeID, AnsType.AnswerType Type, " +
                                        " 'Beneficiary' as SectionORBeneficiary from TbProjectBeneficiaryType bt inner join TbProjectSurvey t on bt.BeneficiaryTypeID = t.BeneficiaryTypeID " +
                                        " INNER JOIN TbBeneficiaryTypeQuestion btq on btq.BeneficiaryTypeID = t.BeneficiaryTypeID " +
                                        " INNER JOIN TbBeneficiaryAnswerType AnsType on  btq.AnswerTypeID =  AnsType.AnswerTypeID " +
                                        " WHERE  IFNULL(t.IsActive,0) = 1 AND t.SurveyID IN (" + surveys + @")" + " and  IFNULL(bt.IsActive,0)= 1 AND bt.IsDeleted = 0  and btq.IsDeleted =0 " +
                                        " and AnsType.IsActive = 1 and AnsType.IsDeleted = 0 and btq.AnswerTypeID  != @QuestionTypeID and AnsType.Category in (1,2) ";

                        var masterSurveyCollection = _connection.Query<MasterSurveyCollection>(surveyQuery, new { QuestionTypeID = (int)CommonActivity.QuestionType.Note }).ToList();

                        var surveyIdCollection = masterSurveyCollection.Select(l => new { l.SurveyId, l.SurveyName }).Distinct().ToList();

                        if (surveyIdCollection != null && surveyIdCollection.Count > 0)
                        {
                            for (int i = 0; i < surveyIdCollection.Count; i++)
                            {
                                ProjectSurveyCollection objProjectSurveyCollection = new ProjectSurveyCollection();
                                objProjectSurveyCollection.SurveyId = surveyIdCollection[i].SurveyId;
                                objProjectSurveyCollection.SurveyName = surveyIdCollection[i].SurveyName;

                                objProjectSurveyCollection.ProjectSurveySectionList = new List<ProjectSurveySectionCollection>();
                                var sectionList1 = masterSurveyCollection.Where(t => t.SurveyId == surveyIdCollection[i].SurveyId).Distinct()
                                    .Select(l => new ProjectSurveySectionCollection { SectionId = l.SectionId, SectionName = l.SectionName }).Distinct().ToList();

                                var sectionList = sectionList1.Select(l => new { l.SectionId, l.SectionName }).Distinct().ToList();

                                List<ProjectSurveySectionCollection> lstSectionCollection = new();
                                if (sectionList != null && sectionList.Count > 0)
                                {
                                    for (int j = 0; j < sectionList.Count; j++)
                                    {
                                        ProjectSurveySectionCollection objProjectSurveySectionCollection = new ProjectSurveySectionCollection();
                                        objProjectSurveySectionCollection.SectionId = sectionList[j].SectionId;
                                        objProjectSurveySectionCollection.SectionName = sectionList[j].SectionName;

                                        var questionsCollection = new List<ProjectSurveySectionQuestionsCollection>();
                                        var questionList = masterSurveyCollection.Where(t => t.SurveyId == surveyIdCollection[i].SurveyId &&
                                            t.SectionId == sectionList[j].SectionId).Select(l => new ProjectSurveySectionQuestionsCollection
                                            {
                                                QuestionId = l.QuestionId,
                                                QuestionName = l.QuestionName,
                                                QuestionTypeID = l.QuestionTypeID,
                                                Type = l.Type,
                                                SectionORBeneficiary = l.SectionORBeneficiary
                                            }).Distinct().ToList();

                                        objProjectSurveySectionCollection.ProjectSurveySectionQuestionsList = questionList;
                                        lstSectionCollection.Add(objProjectSurveySectionCollection);
                                    }
                                }

                                objProjectSurveyCollection.ProjectSurveySectionList = lstSectionCollection;
                                lsSurveyCollection.Add(objProjectSurveyCollection);
                            }
                        }
                    }
                }
                else
                    return null;
            }
            catch (Exception ex)
            {
                return null;
            }
            return lsSurveyCollection;
        }
        #endregion GetSurveySectionsQuestionsCollectionBySurveyIds  

        #region GetProjectActivityMonthwiseData
        /// <summary>
        /// GetProjectActivityMonthwiseData
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public List<ProjectActivityMonthwiseData> GetProjectActivityMonthwiseData(int ActivityId)
        {
            List<ProjectActivityMonthwiseData> lstProjectActivityMonthwiseData = new List<ProjectActivityMonthwiseData>();

            using (_connection = Utils.Database.GetDBConnection())
            {
                string query = "SELECT ID,ActivityId,Target,Budget,ActMonth,ActYear FROM TbProjectActivityMonthwiseData WHERE ActivityId = @ActivityId AND IFNULL(IsActive,0)=1";

                lstProjectActivityMonthwiseData = _connection.Query<ProjectActivityMonthwiseData>(query, new { ActivityId = ActivityId }).ToList();
            }

            return lstProjectActivityMonthwiseData;
        }
        #endregion GetProjectActivityMonthwiseData

        #region TogetActualValue

        #region GetProjectActivityActualValues
        /// <summary>
        /// GetProjectActivityActualValues
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public ProjectActivityActualValue GetProjectActivityActualValues(int ActivityId)
        {
            ProjectActivityActualValue objProjectActivityActualValue = new ProjectActivityActualValue();
            List<ProjectActivity> objProjectActivityList = new List<ProjectActivity>();
            List<ProjectActivity> objProjectActivityListNew = new List<ProjectActivity>();
            string query = string.Empty;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = @"select ProjectActivity.ActivityId,ProjectActivity.ProjectId,ParentActivityId,ProjectActivity.ActivityName,ProjectActivity.Description,ProjectActivity.StartDate,ProjectActivity.EndDate
                                ,ProjectActivity.WeightagePercentage,ProjectActivity.ActivityType,ProjectActivity.SurveyId,ProjectActivity.SurveySectionId,BeneficiaryTypeQuestionID,
                                ProjectActivity.SurveyQuestionId,ProjectActivity.SurveyResponseId,ProjectActivity.SurveyLogic,ProjectActivity.SurveyTarget,ProjectActivity.IsPaymentLinked,ProjectActivity.PaymentLinkedBudget,
                                ProjectActivity.WorkflowId,ProjectActivity.FinanceWorkflowId,ProjectActivity.Periodicity,ProjectActivity.IsDeleted,ProjectActivity.CreatedDate,ProjectActivity.UpdatedDate,ProjectActivity.CreatedBy,ProjectActivity.UpdatedBy
                                ,TbPeriodicity.PeriodicityType as ReportingFrequencyName,ProjectActivity.Progress,@multS as multS,ProjectSurvey.BeneficiaryTypeID as BeneficiaryTypeID,
                                (SELECT COUNT(*) FROM TbProjectActivity WHERE ParentActivityId = ProjectActivity.ActivityId) SubActivityCount  ,
                                (SELECT SUM(WeightagePercentage) FROM  TbProjectActivity WHERE ParentActivityId = ProjectActivity.ActivityId AND IFNULL(IsDeleted,0) = 0) SubActivityTotalWeightage,ProjectActivity.AdditionalQuestionId as AdditionalSurveyQuestionId 
                                ,ProjectActivity.AdditionalQuestionType, ProjectActivity.AdditionalQuestionId, ProjectActivity.AdditionalSectionId, ProjectActivity.AutoGeneratedActivityId, ProjectActivity.IsSubActivitiesAvailable, ProjectActivity.UnitOfMeasure,
                                IFNULL(ProjectActivity.FinancialActivityType,'') AS FinancialActivityType,ifnull(ProjectActivity.FinancialSurveyLogic,0) as FinancialSurveyLogic,ifnull(ProjectActivity.FinancialSurveyTarget,0) as FinancialSurveyTarget,ifnull(ProjectActivity.FinancialAdditionalSurveyId,0) as FinancialAdditionalSurveyId,
                                ifnull(ProjectActivity.FinancialAdditionalSectionId,0) as FinancialAdditionalSectionId,ifnull(ProjectActivity.FinancialAdditionalQuestionId,0) as FinancialAdditionalQuestionId,ifnull(ProjectActivity.FinancialAdditionalQuestionType,0) as FinancialAdditionalQuestionType,ifnull(ProjectActivity.UnitCost,0) as UnitCost   
                                from TbProjectActivity ProjectActivity left join TbProjectSurvey ProjectSurvey on ProjectSurvey.SurveyID = ProjectActivity.SurveyId left join TbPeriodicity TbPeriodicity 
                                on TbPeriodicity.PeriodicityId = ProjectActivity.Periodicity where ProjectActivity.IsDeleted = @isdeleted and ProjectActivity.ActivityId = @ActivityId  Order By ParentActivityId asc,ProjectActivity.ActivityId Desc;";

                    objProjectActivityList = _connection.Query<ProjectActivity>(query, new { isdeleted = 0, ActivityId = ActivityId, multS = 0 }).ToList();

                    foreach (ProjectActivity actItem in objProjectActivityList)
                    {
                        if (actItem.ActivityType == "Quantitative")
                        {
                            if (actItem.SubActivityCount == 0)
                            {
                                //objProjectActivityActualValue.PhysicalActualValue = getDataForActualValue(actItem.ActivityId, actItem.SurveyLogic, actItem.SurveyTarget, actItem.AdditionalSurveyQuestionId, actItem.AdditionalQuestionType, 1);
                                objProjectActivityActualValue.FinancialActualValue = getData(actItem.ActivityId, actItem.FinancialSurveyLogic, actItem.SurveyTarget, actItem.FinancialAdditionalSectionId, actItem.FinancialAdditionalQuestionId, actItem.FinancialAdditionalQuestionType, 2);
                                //double result = getData(actItem.ActivityId, actItem.FinancialSurveyLogic, actItem.SurveyTarget, actItem.FinancialAdditionalQuestionId, actItem.FinancialAdditionalQuestionType, 2);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return objProjectActivityActualValue;
        }
        #endregion GetProjectActivityActualValues

        /// <summary>
        /// getData
        /// </summary>
        /// <param name="activityID"></param>
        /// <param name="logicType"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="additionalSurveyQuestionId"></param>
        /// <returns></returns>
        public double getDataForActualValue(int activityID, int logicType, string SurveyTarget, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false, int TypeOfLogic = 1)
        {
            List<ActivityDataCollectionDetails> objActivityDataCollectionDetails = new List<ActivityDataCollectionDetails>();
            List<ActivityDataCollectionDetails> lstBeneficiaryActivityDataCollectionDetails = new List<ActivityDataCollectionDetails>();

            string query = string.Empty;

            double result = 0;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    query = "SELECT ACT.ID,ACT.ActivityId,ACT.SurveyId,ACT.SectionId, ACT.QuestionId,BeneficiaryQuestionID,SRV.BeneficiaryTypeID,SRV.StartDate,SRV.EndDate ";
                    query += ",ifnull(SRVQST.QuestionTypeID,0) SurveyAnswerType,ifnull(BENQST.AnswerTypeID,0) BenAnswerType FROM TbProjectSurvey SRV ";
                    query += "LEFT JOIN TbOutputSurveyCollection ACT  ON ACT.SurveyId = SRV.SurveyId ";
                    query += "LEFT JOIN TbProjectSurveyQuestion SRVQST ON SRVQST.QuestionID =  ACT.QuestionId ";
                    query += "LEFT JOIN TbBeneficiaryTypeQuestion BENQST ON BENQST.QuestionID =  ACT.BeneficiaryQuestionID ";
                    query += "where ACT.ActivityId = @ActivityId  and  ifnull(ACT.IsActive,0)=1 AND ifnull(SRV.IsActive,0)=1 AND ifnull(ACT.TypeofLogic,1)=@TypeofLogic ; ";

                    objActivityDataCollectionDetails = _connection.Query<ActivityDataCollectionDetails>(query, new { ActivityId = activityID, TypeofLogic = TypeOfLogic }).ToList();

                    if (objActivityDataCollectionDetails != null && objActivityDataCollectionDetails.Count > 0)
                    {
                        var mySKUs = objActivityDataCollectionDetails.Select(l => l.QuestionId).Distinct().ToList();
                        string joinedQuestionIds = string.Join(",", mySKUs);

                        var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.BeneficiaryTypeID).Distinct().ToList();
                        string joinedBeneficiaryTypeID = string.Join(",", mySKUs1);

                        var benficiaryIds = objActivityDataCollectionDetails.Where(x => x.BeneficiaryQuestionID > 0).Select(l => l.BeneficiaryQuestionID).Distinct().ToList();
                        string joinedBeneficiaryQuestionID = string.Join(",", benficiaryIds);

                        List<ActivitySurveyResponse> lstActivitySurveyResponse = new List<ActivitySurveyResponse>();
                        List<ActivitySurveyResponse> lstActivitySurveyResponse1 = new List<ActivitySurveyResponse>();
                        List<ActivitySurveyResponse> lstBeneficiarySurveyResponse = new List<ActivitySurveyResponse>();

                        if (joinedQuestionIds != null && joinedQuestionIds.Length > 0)
                        {
                            string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID FROM TbProjectSurveyResponses where QuestionID in(" + joinedQuestionIds + ") and ifnull(IsActive,0)=1;";
                            lstActivitySurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry).ToList();

                            lstActivitySurveyResponse1 = lstActivitySurveyResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();
                        }

                        if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0)
                        {
                            string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                            QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID limit 1) as SurveyID,";
                            QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID  limit 1) as SyncTaskID ";
                            QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID in(" + joinedBeneficiaryQuestionID + ") and ifnull(reg.IsDeleted,0)=0;";
                            lstBeneficiarySurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTBenQry).ToList();

                            lstActivitySurveyResponse1 = lstActivitySurveyResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();
                        }


                        if (logicType == (int)OutPutLogicType.Average)
                        {
                            result = GetQuantitativeAverage_forActualValue(objActivityDataCollectionDetails, lstActivitySurveyResponse1, lstActivitySurveyResponse, joinedBeneficiaryQuestionID, SurveyTarget, lstBeneficiarySurveyResponse, additionalSurveyQuestionId, additionalQuestionType, TypeOfLogic);
                        }
                        else if (logicType == (int)OutPutLogicType.Cumulative_Sum)
                        {
                            result = GetQuantitativeCumulativeSum_forActualValue(objActivityDataCollectionDetails, lstActivitySurveyResponse1, lstActivitySurveyResponse, joinedBeneficiaryQuestionID, SurveyTarget, lstBeneficiarySurveyResponse, additionalSurveyQuestionId, additionalQuestionType, TypeOfLogic);
                        }
                        else if (logicType == (int)OutPutLogicType.Count_of_Unique_Reponses)
                        {
                            result = GetQuantitativeUniqueResponses_forActualValue(objActivityDataCollectionDetails, lstActivitySurveyResponse1, lstActivitySurveyResponse, joinedBeneficiaryQuestionID, SurveyTarget, lstBeneficiarySurveyResponse, TypeOfLogic);
                        }
                        else
                        {
                            double totDays = (objActivityDataCollectionDetails[0].EndDate - objActivityDataCollectionDetails[0].StartDate).TotalDays;
                            double totDaysFnished = (DateTime.Now - objActivityDataCollectionDetails[0].StartDate).TotalDays;
                            result = (int)((totDaysFnished * 100) / totDays);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return result;
        }

        #region GetQuantitativeAverage_forActualValue
        /// <summary>
        /// GetQuantitativeAverage_forActualValue
        /// </summary>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="lstActivitySurveyResponse1"></param>
        /// <param name="lstActivitySurveyResponse"></param>
        /// <param name="joinedBeneficiaryQuestionID"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <returns></returns>
        public double GetQuantitativeAverage_forActualValue(List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, List<ActivitySurveyResponse> lstActivitySurveyResponse1, List<ActivitySurveyResponse> lstActivitySurveyResponse, string joinedBeneficiaryQuestionID, string SurveyTarget, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false, int TypeOfLogic = 1)
        {
            string query = string.Empty;
            string query1 = string.Empty;
            double result = 0;
            double progressPercentage = 0;
            List<OutPutCount> lstOutPutCount = new List<OutPutCount>();

            List<ActivitySurveyResponse> lstBeneficiarySurveyResponseAll = new List<ActivitySurveyResponse>();

            List<BeneficiaryResponse> lstBeneficiaryResponse = null;
            lstBeneficiaryResponse = new List<BeneficiaryResponse>();
            List<OutPutQuestionRSP> lstOutPutQuestionRSP2 = new List<OutPutQuestionRSP>();
            List<ActivitySurveyResponse> lstActivitySurveyResponse5 = new List<ActivitySurveyResponse>();

            for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
            {
                OutPutCount objOutPutCount = new OutPutCount();

                string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID and ifnull(srvCollection.TypeofLogic,1) = @TypeofLogic; ";
                List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();

                lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID, TypeofLogic = TypeOfLogic }).ToList();


                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0) //&& lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
                {
                    //lstBeneficiarySurveyResponse = GetBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, lstBeneficiarySurveyResponse, objActivityDataCollectionDetails[i]);

                    string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SurveyID,";
                    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SyncTaskID ";
                    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID = @BeneficiaryQuestionID and ifnull(reg.IsDeleted,0)=0  ";
                    QSTBenQry += subqury;

                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse1 = new List<ActivitySurveyResponse>();

                    lstBeneficiarySurveyResponse1 = _connection.Query<ActivitySurveyResponse>(QSTBenQry, new { BeneficiaryQuestionID = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyID = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            var mySKUs3 = lstBeneficiarySurveyResponse1.Select(l => l.ResponseID).Distinct().ToList();
                            string joinedResponseID = string.Join(",", mySKUs3);

                            if (!string.IsNullOrEmpty(joinedResponseID))
                            {
                                List<ActivitySurveyResponse> lstBeneficiarySurveyResponse2 = new List<ActivitySurveyResponse>();

                                //string QSTQry4 = "select DISTINCT reg.BeneficiaryID ResponseID,reg.Answer,reg.QuestionID,@SurveyID AS SurveyID,1 AS SubmissionCount from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID  WHERE reg.BeneficiaryID in(" + joinedResponseID + ")  and reg.QuestionID =@QuestionID ";

                                //lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                //if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                //{
                                //    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                //}
                                //else
                                //{
                                string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount from TbProjectSurveyResponses  WHERE ResponseID in(" + joinedResponseID + ")  and QuestionID =@QuestionID and  SurveyID=@SurveyID;";

                                lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                {
                                    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                }
                                //}
                            }
                        }
                    }
                    else
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse1);
                        }
                    }
                }

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstActivitySurveyResponse1.Count > 0)
                {
                    if (objActivityDataCollectionDetails[i].QuestionId > 0)
                    {
                        for (int cnt = 0; cnt < lstActivitySurveyResponse1.Count; cnt++)
                        {
                            List<ActivitySurveyResponse> lstActivitySurveyResponse3 = new List<ActivitySurveyResponse>();
                            lstActivitySurveyResponse3 = lstActivitySurveyResponse.Where(x => x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID && x.QuestionID == objActivityDataCollectionDetails[i].QuestionId).ToList();

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                QSTQry += "QuestionID = @QuestionID and ResponseID=@ResponseID  ";
                                QSTQry += subqury;
                                lstActivitySurveyResponse3 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { QuestionID = objActivityDataCollectionDetails[i].QuestionId, ResponseID = lstActivitySurveyResponse1[cnt].ResponseID }).ToList();

                                if (additionalSurveyQuestionId > 0 && lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                                {
                                    List<ActivitySurveyResponse> lstActivitySurveyResponse4 = new List<ActivitySurveyResponse>();
                                    var mySKUs = lstActivitySurveyResponse3.Select(l => l.SyncTaskID).Distinct().ToList();

                                    string joinedSyncTaskID = string.Join(",", mySKUs);

                                    if (additionalQuestionType.Value)
                                    {
                                        QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                        QSTQry += "ResponseID=@ResponseID  and SyncTaskID in(" + joinedSyncTaskID + ")  and QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        QSTQry = "select RES.ResponseID,reg.Answer,reg.QuestionID,RES.SurveyID,RES.SyncTaskID,ifnull(RES.SubmissionCount,1) SubmissionCount ";
                                        QSTQry += "from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID ";
                                        QSTQry += "JOIN TbProjectSurveyResponses RES ON RES.ResponseID = reg.BeneficiaryID WHERE ifnull(ben.IsActive,0)=1  and ";
                                        QSTQry += "ifnull(RES.IsActive,0)=1 and RES.ResponseID=@ResponseID  and RES.SyncTaskID in(" + joinedSyncTaskID + ")  and reg.QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0 && additionalSurveyQuestionId <= 0)
                            {
                                double sumValue = 0;
                                int cnt1 = 0;

                                for (cnt1 = 0; cnt1 < lstActivitySurveyResponse3.Count; cnt1++)
                                {
                                    sumValue += (lstActivitySurveyResponse3[cnt1].Answer != null && lstActivitySurveyResponse3[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse3[cnt1].Answer) : 0;
                                }

                                if (sumValue > 0 && cnt1 > 0)
                                {
                                    double average = sumValue / cnt1;

                                    BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                    objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse3[0].ResponseID;
                                    objBeneficiaryResponse.Anwer = average;
                                    objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse3[0].SurveyID;
                                    lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                }
                            }
                            else if (additionalSurveyQuestionId > 0)
                            {
                                if (i == objActivityDataCollectionDetails.Count - 1 && cnt == lstActivitySurveyResponse1.Count - 1)
                                {
                                    if (lstActivitySurveyResponse5 != null && lstActivitySurveyResponse5.Count > 0)
                                    {
                                        var mySKUs1 = lstActivitySurveyResponse5.Select(l => l.ResponseID).Distinct().ToList();

                                        string joinedResponseID = string.Join(",", mySKUs1);

                                        if (!string.IsNullOrEmpty(joinedResponseID))
                                        {
                                            string[] splt = joinedResponseID.Split(',');

                                            if (splt != null && splt.Length > 0)
                                            {
                                                foreach (var itm10 in splt)
                                                {
                                                    double sumValue = 0;
                                                    int cnt1 = 0;

                                                    List<ActivitySurveyResponse> lstActivitySurveyResponse6 = new List<ActivitySurveyResponse>();

                                                    lstActivitySurveyResponse6 = lstActivitySurveyResponse5.Where(x => x.ResponseID == Convert.ToInt32(itm10)).ToList();

                                                    if (lstActivitySurveyResponse6 != null && lstActivitySurveyResponse6.Count > 0)
                                                    {
                                                        for (cnt1 = 0; cnt1 < lstActivitySurveyResponse6.Count; cnt1++)
                                                        {
                                                            sumValue += (lstActivitySurveyResponse6[cnt1].Answer != null && lstActivitySurveyResponse6[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse6[cnt1].Answer) : 0;
                                                        }

                                                        if (sumValue > 0 && cnt1 > 0)
                                                        {
                                                            double average = sumValue / cnt1;

                                                            BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                                            objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse6[0].ResponseID;
                                                            objBeneficiaryResponse.Anwer = average;
                                                            objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse6[0].SurveyID;
                                                            lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
                else if (objActivityDataCollectionDetails[i].QuestionId > 0)
                {
                    string subqury = GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                    if (additionalSurveyQuestionId <= 0)
                    {
                        query1 = "SELECT SUM(Answer) AnswerSum,(SELECT COUNT(QuestionID) FROM TbProjectSurveyResponses WHERE QuestionID = resp.QuestionID " + subqury + ") ResponseCount,SurveyID FROM TbProjectSurveyResponses resp WHERE  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1  ";
                        query1 += subqury;
                        query1 += " GROUP BY SurveyID;";

                        objOutPutCount = _connection.Query<OutPutCount>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).FirstOrDefault();
                    }
                    else
                    {
                        List<OutPutQuestionRSP> lstOutPutQuestionRSP = new List<OutPutQuestionRSP>();
                        query1 = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount,SurveyID from TbProjectSurveyResponses where  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1 ";
                        query1 += subqury;

                        lstOutPutQuestionRSP = _connection.Query<OutPutQuestionRSP>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).ToList();

                        if (lstOutPutQuestionRSP != null && lstOutPutQuestionRSP.Count > 0)
                        {
                            var mySKUs = lstOutPutQuestionRSP.Select(l => l.SyncTaskID).Distinct().ToList();
                            string joinedSyncTaskID = string.Join(",", mySKUs);

                            if (joinedSyncTaskID != null && joinedSyncTaskID.Length > 0)
                            {
                                objOutPutCount.SurveyID = lstOutPutQuestionRSP[0].SurveyID;

                                List<OutPutQuestionRSP> lstOutPutQuestionRSP1 = new List<OutPutQuestionRSP>();

                                string QSTQry = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount from TbProjectSurveyResponses where SyncTaskID in(" + joinedSyncTaskID + ") and ifnull(IsActive,0)=1 and QuestionID=@QuestionID;";
                                lstOutPutQuestionRSP1 = _connection.Query<OutPutQuestionRSP>(QSTQry, new { QuestionID = additionalSurveyQuestionId }).ToList();

                                if (lstOutPutQuestionRSP1 != null && lstOutPutQuestionRSP1.Count > 0)
                                {
                                    foreach (var itm in lstOutPutQuestionRSP)
                                    {
                                        if (lstOutPutQuestionRSP2.Count == 0)
                                        {
                                            lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                        }
                                        else
                                        {
                                            OutPutQuestionRSP objOutPutQuestionRSP = new OutPutQuestionRSP();
                                            objOutPutQuestionRSP = lstOutPutQuestionRSP2.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault();

                                            if (objOutPutQuestionRSP == null)
                                            {
                                                lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (i == objActivityDataCollectionDetails.Count - 1 && additionalSurveyQuestionId > 0)
                    {
                        double answerSum = lstOutPutQuestionRSP2.Sum(a => Convert.ToDouble(a.AnswerString));
                        int responseCount = lstOutPutQuestionRSP2.Count(); //lstOutPutQuestionRSP2.Sum(a => a.SubmissionCount);

                        if (answerSum > 0 && responseCount > 0)
                        {
                            objOutPutCount.AnswerSum = answerSum;
                            objOutPutCount.ResponseCount = responseCount;
                        }
                    }

                    if (objOutPutCount != null && objOutPutCount.ResponseCount > 0)
                    {
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0 && lstBeneficiarySurveyResponseAll != null && lstBeneficiarySurveyResponseAll.Count > 0 && lstBeneficiaryResponse.Count == 0)
            {
                List<ActivitySurveyResponse> lstBenActivitySurveyResponse2 = lstBeneficiarySurveyResponseAll.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                for (int cnt10 = 0; cnt10 < lstBenActivitySurveyResponse2.Count; cnt10++)
                {
                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                    lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponseAll.Where(x => x.ResponseID == lstBenActivitySurveyResponse2[cnt10].ResponseID).ToList();
                    if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                    {
                        BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                        objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                        objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                        objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse22.Sum(x => Convert.ToDouble(x.Answer)) / lstBeneficiarySurveyResponse22.Count;
                        lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                    }
                }
            }

            if (lstBeneficiaryResponse != null && lstBeneficiaryResponse.Count > 0)
            {
                List<BeneficiaryResponse> lstBeneficiaryResponse3 = lstBeneficiaryResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                if (lstBeneficiaryResponse3 != null && lstBeneficiaryResponse3.Count > 0)
                {
                    for (int g = 0; g < lstBeneficiaryResponse3.Count; g++)
                    {
                        OutPutCount objOutPutCount = new OutPutCount();
                        objOutPutCount.ResponseCount = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID).Count();
                        double sum = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID && x.Anwer != null).Sum(x => Convert.ToDouble(x.Anwer));
                        objOutPutCount.AnswerSum = (sum / objOutPutCount.ResponseCount);
                        objOutPutCount.SurveyID = lstBeneficiaryResponse[g].SurveyID;
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (lstOutPutCount != null && lstOutPutCount.Count > 0)
            {
                var mySKUs3 = lstOutPutCount.Select(l => l.SurveyID).Distinct().ToList();
                string joinedSurveyId = string.Join(",", mySKUs3);
                double totsum = 0;
                int toCount = 0;
                if (joinedSurveyId != null && joinedSurveyId.Length > 0)
                {
                    string[] spltsurveyId = joinedSurveyId.Split(',');
                    for (int cnt6 = 0; cnt6 < spltsurveyId.Length; cnt6++)
                    {
                        OutPutCount obj1OutPutCount = new OutPutCount();
                        totsum += lstOutPutCount.Where(x => x.SurveyID == Convert.ToInt32(spltsurveyId[cnt6])).Sum(x => x.AnswerSum);
                        toCount += lstOutPutCount.Where(x => x.SurveyID == Convert.ToInt32(spltsurveyId[cnt6])).Sum(x => x.ResponseCount);
                    }
                }

                result = totsum / toCount;
                progressPercentage = result;/// Convert.ToDouble(SurveyTarget); //(result * 100) / Convert.ToDouble(SurveyTarget);
            }

            return progressPercentage;
        }
        #endregion GetQuantitativeAverage_forActualValue

        #region GetQuantitativeCumulativeSum_forActualValue
        /// <summary>
        /// GetQuantitativeCumulativeSum_forActualValue
        /// </summary>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="lstActivitySurveyResponse1"></param>
        /// <param name="lstActivitySurveyResponse"></param>
        /// <param name="lstOutPutCount"></param>
        /// <param name="joinedBeneficiaryQuestionID"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <returns></returns>
        public double GetQuantitativeCumulativeSum_forActualValue(List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, List<ActivitySurveyResponse> lstActivitySurveyResponse1, List<ActivitySurveyResponse> lstActivitySurveyResponse, string joinedBeneficiaryQuestionID, string SurveyTarget, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false, int TypeOfLogic = 1)
        {
            string query = string.Empty;
            string query1 = string.Empty;
            double result = 0;
            List<OutPutCount> lstOutPutCount = new List<OutPutCount>();
            List<BeneficiaryResponse> lstBeneficiaryResponse = new List<BeneficiaryResponse>();

            List<ActivitySurveyResponse> lstBeneficiarySurveyResponseAll = new List<ActivitySurveyResponse>();
            List<OutPutQuestionRSP> lstOutPutQuestionRSP2 = new List<OutPutQuestionRSP>();
            List<ActivitySurveyResponse> lstActivitySurveyResponse5 = new List<ActivitySurveyResponse>();

            for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
            {
                OutPutCount objOutPutCount = new OutPutCount();

                //to get survey prime logic -  starts
                string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition  from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID  and ifnull(srvCollection.TypeofLogic,1) = @TypeofLogic; ";
                List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();
                lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID, TypeofLogic = TypeOfLogic }).ToList();
                //to get survey prime logic - ends

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0) //&& lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
                {
                    //  lstBeneficiarySurveyResponse = GetBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, lstBeneficiarySurveyResponse, objActivityDataCollectionDetails[i]);

                    string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SurveyID,";
                    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SyncTaskID ";
                    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID = @BeneficiaryQuestionID and ifnull(reg.IsDeleted,0)=0  ";
                    QSTBenQry += subqury;

                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse1 = new List<ActivitySurveyResponse>();

                    lstBeneficiarySurveyResponse1 = _connection.Query<ActivitySurveyResponse>(QSTBenQry, new { BeneficiaryQuestionID = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyID = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            var mySKUs3 = lstBeneficiarySurveyResponse1.Select(l => l.ResponseID).Distinct().ToList();
                            string joinedResponseID = string.Join(",", mySKUs3);

                            if (!string.IsNullOrEmpty(joinedResponseID))
                            {
                                List<ActivitySurveyResponse> lstBeneficiarySurveyResponse2 = new List<ActivitySurveyResponse>();

                                //string QSTQry4 = "select DISTINCT reg.BeneficiaryID ResponseID,reg.Answer,reg.QuestionID,@SurveyID AS SurveyID,1 AS SubmissionCount from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID  WHERE reg.BeneficiaryID in(" + joinedResponseID + ")  and reg.QuestionID =@QuestionID ";

                                //lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                //if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                //{
                                //    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                //}
                                //else
                                //{
                                string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount from TbProjectSurveyResponses  WHERE ResponseID in(" + joinedResponseID + ")  and QuestionID =@QuestionID and  SurveyID=@SurveyID;";

                                lstBeneficiarySurveyResponse2 = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId, SurveyID = lstBeneficiarySurveyResponse1[lstBeneficiarySurveyResponse1.Count - 1].SurveyID }).ToList();

                                if (lstBeneficiarySurveyResponse2 != null && lstBeneficiarySurveyResponse2.Count > 0)
                                {
                                    lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse2);
                                }
                                //}
                            }
                        }
                    }
                    else
                    {
                        if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                        {
                            lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse1);
                        }
                    }
                }

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstActivitySurveyResponse1.Count > 0)
                {
                    if (objActivityDataCollectionDetails[i].QuestionId > 0)
                    {
                        for (int cnt = 0; cnt < lstActivitySurveyResponse1.Count; cnt++)
                        {
                            List<ActivitySurveyResponse> lstActivitySurveyResponse3 = new List<ActivitySurveyResponse>();
                            lstActivitySurveyResponse3 = lstActivitySurveyResponse.Where(x => x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID && x.QuestionID == objActivityDataCollectionDetails[i].QuestionId).ToList();

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                // lstActivitySurveyResponse3 = GetNonBeneficiarySurveyLogicQueryNew(lstSurveyPrimeLogic, lstActivitySurveyResponse3, objActivityDataCollectionDetails[i]);

                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                QSTQry += "QuestionID = @QuestionID and ResponseID=@ResponseID  ";
                                QSTQry += subqury;
                                lstActivitySurveyResponse3 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { QuestionID = objActivityDataCollectionDetails[i].QuestionId, ResponseID = lstActivitySurveyResponse1[cnt].ResponseID }).ToList();

                                if (additionalSurveyQuestionId > 0 && lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                                {
                                    List<ActivitySurveyResponse> lstActivitySurveyResponse4 = new List<ActivitySurveyResponse>();
                                    var mySKUs = lstActivitySurveyResponse3.Select(l => l.SyncTaskID).Distinct().ToList();

                                    string joinedSyncTaskID = string.Join(",", mySKUs);

                                    if (additionalQuestionType.Value)
                                    {
                                        QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                        QSTQry += "ResponseID=@ResponseID  and SyncTaskID in(" + joinedSyncTaskID + ")  and QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        QSTQry = "select RES.ResponseID,reg.Answer,reg.QuestionID,RES.SurveyID,RES.SyncTaskID,ifnull(RES.SubmissionCount,1) SubmissionCount ";
                                        QSTQry += "from TbProjectBeneficiary ben JOIN TbBeneficiaryRegistrationDetails reg ON ben.BeneficiaryID = reg.BeneficiaryID ";
                                        QSTQry += "JOIN TbProjectSurveyResponses RES ON RES.ResponseID = reg.BeneficiaryID WHERE ifnull(ben.IsActive,0)=1  and ";
                                        QSTQry += "ifnull(RES.IsActive,0)=1 and RES.ResponseID=@ResponseID  and RES.SyncTaskID in(" + joinedSyncTaskID + ")  and reg.QuestionID =@QuestionID";
                                        lstActivitySurveyResponse4 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { ResponseID = lstActivitySurveyResponse1[cnt].ResponseID, QuestionID = additionalSurveyQuestionId }).ToList();

                                        if (lstActivitySurveyResponse4 != null && lstActivitySurveyResponse4.Count > 0)
                                        {
                                            foreach (var itm in lstActivitySurveyResponse4)
                                            {
                                                if (lstActivitySurveyResponse5.Count == 0)
                                                {
                                                    lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                }
                                                else
                                                {
                                                    ActivitySurveyResponse objActivitySurveyResponse = new ActivitySurveyResponse();
                                                    objActivitySurveyResponse = lstActivitySurveyResponse5.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault();

                                                    if (objActivitySurveyResponse == null)
                                                    {
                                                        lstActivitySurveyResponse5.Add(lstActivitySurveyResponse4.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID).FirstOrDefault());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0 && additionalSurveyQuestionId <= 0)
                            {
                                double sumValue = 0;
                                int cnt1 = 0;

                                for (cnt1 = 0; cnt1 < lstActivitySurveyResponse3.Count; cnt1++)
                                {
                                    sumValue += (lstActivitySurveyResponse3[cnt1].Answer != null && lstActivitySurveyResponse3[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse3[cnt1].Answer) : 0;
                                }

                                if (sumValue > 0)
                                {
                                    BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                    objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse3[0].ResponseID;
                                    objBeneficiaryResponse.Anwer = sumValue;
                                    objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse3[0].SurveyID;
                                    lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                }
                            }
                            else if (additionalSurveyQuestionId > 0)
                            {
                                if (i == objActivityDataCollectionDetails.Count - 1 && cnt == lstActivitySurveyResponse1.Count - 1)
                                {
                                    if (lstActivitySurveyResponse5 != null && lstActivitySurveyResponse5.Count > 0)
                                    {
                                        double sumValue = 0;
                                        int cnt1 = 0;

                                        for (cnt1 = 0; cnt1 < lstActivitySurveyResponse5.Count; cnt1++)
                                        {
                                            sumValue += (lstActivitySurveyResponse5[cnt1].Answer != null && lstActivitySurveyResponse5[cnt1].Answer != "") ? Convert.ToDouble(lstActivitySurveyResponse5[cnt1].Answer) : 0;
                                        }

                                        if (sumValue > 0 && cnt1 > 0)
                                        {
                                            BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                            objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse5[0].ResponseID;
                                            objBeneficiaryResponse.Anwer = sumValue;
                                            objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse5[0].SurveyID;
                                            lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                                            lstActivitySurveyResponse5 = new List<ActivitySurveyResponse>();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (objActivityDataCollectionDetails[i].QuestionId > 0)
                {
                    string subQury = GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                    if (additionalSurveyQuestionId <= 0)
                    {
                        query1 = "SELECT SUM(Answer) AnswerSum,(SELECT COUNT(QuestionID) FROM TbProjectSurveyResponses WHERE QuestionID = resp.QuestionID " + subQury + ") ResponseCount,SurveyID FROM TbProjectSurveyResponses resp WHERE  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1  ";
                        query1 += subQury;
                        query1 += " GROUP BY SurveyID;";

                        objOutPutCount = _connection.Query<OutPutCount>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).FirstOrDefault();
                    }
                    else
                    {
                        List<OutPutQuestionRSP> lstOutPutQuestionRSP = new List<OutPutQuestionRSP>();
                        query1 = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount,SurveyID from TbProjectSurveyResponses where  QuestionID = @QuestionId AND ifnull(IsActive,0) = 1 ";
                        query1 += subQury;

                        lstOutPutQuestionRSP = _connection.Query<OutPutQuestionRSP>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).ToList();

                        if (lstOutPutQuestionRSP != null && lstOutPutQuestionRSP.Count > 0)
                        {
                            var mySKUs = lstOutPutQuestionRSP.Select(l => l.SyncTaskID).Distinct().ToList();
                            string joinedSyncTaskID = string.Join(",", mySKUs);

                            if (joinedSyncTaskID != null && joinedSyncTaskID.Length > 0)
                            {
                                objOutPutCount.SurveyID = lstOutPutQuestionRSP[0].SurveyID;

                                List<OutPutQuestionRSP> lstOutPutQuestionRSP1 = new List<OutPutQuestionRSP>();

                                string QSTQry = "select Answer as AnswerString,SyncTaskID,ifnull(SubmissionCount,1) SubmissionCount from TbProjectSurveyResponses where SyncTaskID in(" + joinedSyncTaskID + ") and ifnull(IsActive,0)=1 and QuestionID=@QuestionID;";
                                lstOutPutQuestionRSP1 = _connection.Query<OutPutQuestionRSP>(QSTQry, new { QuestionID = additionalSurveyQuestionId }).ToList();

                                if (lstOutPutQuestionRSP1 != null && lstOutPutQuestionRSP1.Count > 0)
                                {
                                    foreach (var itm in lstOutPutQuestionRSP)
                                    {
                                        if (lstOutPutQuestionRSP2.Count == 0)
                                        {
                                            lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                        }
                                        else
                                        {
                                            OutPutQuestionRSP objOutPutQuestionRSP = new OutPutQuestionRSP();
                                            objOutPutQuestionRSP = lstOutPutQuestionRSP2.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault();

                                            if (objOutPutQuestionRSP == null)
                                            {
                                                lstOutPutQuestionRSP2.Add(lstOutPutQuestionRSP1.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).FirstOrDefault());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (i == objActivityDataCollectionDetails.Count - 1 && additionalSurveyQuestionId > 0)
                    {
                        double answerSum = lstOutPutQuestionRSP2.Sum(a => Convert.ToDouble(a.AnswerString));

                        if (answerSum > 0)
                        {
                            objOutPutCount.AnswerSum = answerSum;
                        }
                    }

                    if (objOutPutCount != null && objOutPutCount.AnswerSum > 0)
                    {
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0 && lstBeneficiarySurveyResponseAll != null && lstBeneficiarySurveyResponseAll.Count > 0 && lstBeneficiaryResponse.Count == 0)
            {
                List<ActivitySurveyResponse> lstBenActivitySurveyResponse2 = lstBeneficiarySurveyResponseAll.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                for (int cnt10 = 0; cnt10 < lstBenActivitySurveyResponse2.Count; cnt10++)
                {
                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                    lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponseAll.Where(x => x.ResponseID == lstBenActivitySurveyResponse2[cnt10].ResponseID).ToList();
                    if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                    {
                        BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                        objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                        objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                        objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse22.Sum(x => Convert.ToDouble(x.Answer));
                        lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                    }
                }
            }

            if (lstBeneficiaryResponse != null && lstBeneficiaryResponse.Count > 0)
            {
                List<BeneficiaryResponse> lstBeneficiaryResponse3 = lstBeneficiaryResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                if (lstBeneficiaryResponse3 != null && lstBeneficiaryResponse3.Count > 0)
                {
                    for (int g = 0; g < lstBeneficiaryResponse3.Count; g++)
                    {
                        OutPutCount objOutPutCount = new OutPutCount();
                        objOutPutCount.ResponseCount = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID).Count();
                        objOutPutCount.AnswerSum = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID && x.Anwer != null).Sum(x => Convert.ToDouble(x.Anwer));
                        objOutPutCount.SurveyID = lstBeneficiaryResponse[g].SurveyID;
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (lstOutPutCount != null && lstOutPutCount.Count > 0)
            {
                var mySKUs3 = lstOutPutCount.Select(l => l.SurveyID).Distinct().ToList();
                string joinedSurveyId = string.Join(",", mySKUs3);
                double totsum = 0;
                if (joinedSurveyId != null && joinedSurveyId.Length > 0)
                {
                    string[] spltsurveyId = joinedSurveyId.Split(',');
                    for (int cnt6 = 0; cnt6 < spltsurveyId.Length; cnt6++)
                    {
                        OutPutCount obj1OutPutCount = new OutPutCount();
                        totsum += lstOutPutCount.Where(x => x.SurveyID == Convert.ToDouble(spltsurveyId[cnt6])).Sum(x => x.AnswerSum);
                    }
                }

                result = totsum;/// Convert.ToDouble(SurveyTarget); //(totsum * 100) / Convert.ToDouble(SurveyTarget);
            }

            return result;
        }
        #endregion GetQuantitativeCumulativeSum_forActualValue

        #region GetQuantitativeUniqueResponses_forActualValue
        /// <summary>
        /// GetQuantitativeUniqueResponses_forActualValue
        /// </summary>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="lstActivitySurveyResponse1"></param>
        /// <param name="lstActivitySurveyResponse"></param>
        /// <param name="lstOutPutCount"></param>
        /// <param name="joinedBeneficiaryQuestionID"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="lstBeneficiarySurveyResponse"></param>
        /// <returns></returns>
        public double GetQuantitativeUniqueResponses_forActualValue(List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, List<ActivitySurveyResponse> lstActivitySurveyResponse1, List<ActivitySurveyResponse> lstActivitySurveyResponse, string joinedBeneficiaryQuestionID, string SurveyTarget, List<ActivitySurveyResponse> lstBeneficiarySurveyResponse, int TypeOfLogic = 1)
        {
            string query = string.Empty;
            string query1 = string.Empty;
            double result = 0;
            List<OutPutCount> lstOutPutCount = new List<OutPutCount>();

            List<BeneficiaryResponse> lstBeneficiaryResponse = new List<BeneficiaryResponse>();

            List<ActivitySurveyResponse> lstBeneficiarySurveyResponseAll = new List<ActivitySurveyResponse>();

            for (int i = 0; i < objActivityDataCollectionDetails.Count; i++)
            {
                OutPutCount objOutPutCount = new OutPutCount();

                //to get survey prime logic - starts
                string querySurveyPrime = "select LG.SurveyLogic SurveyLogicPrime,LG.SurveyAnswer SurveyLogicPrimeAnswer, LGType.Type SurveyLogicPrimeType,srvCollection.BeneficiaryQuestionID,ifnull(LG.LogicCondition,0) SurveyLogicCondition from TbOutputSurveyLogic LG JOIN TbLogicType LGType ON LG.SurveyLogic = LGType.ID";
                querySurveyPrime += " JOIN TbOutputSurveyCollection srvCollection ON LG.SurveyCollectionID = srvCollection.ID WHERE srvCollection.ID = @ID and ifnull(srvCollection.TypeofLogic,1) = @TypeofLogic; ";
                List<SurveyPrimeLogic> lstSurveyPrimeLogic = new List<SurveyPrimeLogic>();
                lstSurveyPrimeLogic = _connection.Query<SurveyPrimeLogic>(querySurveyPrime, new { ID = objActivityDataCollectionDetails[i].ID, TypeofLogic = TypeOfLogic }).ToList();
                //to get survey prime logic - ends

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstBeneficiarySurveyResponse != null && lstBeneficiarySurveyResponse.Count > 0) //&& lstSurveyPrimeLogic != null && lstSurveyPrimeLogic.Count > 0)
                {
                    string subqury = GetBeneficiarySurveyLogicQuery2(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].BenAnswerType);

                    string QSTBenQry = "SELECT reg.BeneficiaryID as ResponseID,reg.Answer,reg.QuestionID, ";
                    QSTBenQry += "(select SurveyID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SurveyID,";
                    QSTBenQry += "(select SyncTaskID from TbProjectSurveyResponses where ResponseID = reg.BeneficiaryID and SurveyID=@SurveyID limit 1) as SyncTaskID ";
                    QSTBenQry += " FROM TbBeneficiaryRegistrationDetails reg where reg.QuestionID = @BeneficiaryQuestionID and ifnull(reg.IsDeleted,0)=0  ";
                    QSTBenQry += subqury;

                    List<ActivitySurveyResponse> lstBeneficiarySurveyResponse1 = new List<ActivitySurveyResponse>();

                    lstBeneficiarySurveyResponse1 = _connection.Query<ActivitySurveyResponse>(QSTBenQry, new { BeneficiaryQuestionID = objActivityDataCollectionDetails[i].BeneficiaryQuestionID, SurveyID = objActivityDataCollectionDetails[i].SurveyId }).ToList();

                    if (lstBeneficiarySurveyResponse1 != null && lstBeneficiarySurveyResponse1.Count > 0)
                    {
                        lstBeneficiarySurveyResponseAll.AddRange(lstBeneficiarySurveyResponse1);
                    }
                }

                if (objActivityDataCollectionDetails[i].BeneficiaryTypeID > 0 && lstActivitySurveyResponse1.Count > 0)
                {
                    if (objActivityDataCollectionDetails[i].QuestionId > 0)
                    {
                        for (int cnt = 0; cnt < lstActivitySurveyResponse1.Count; cnt++)
                        {
                            List<ActivitySurveyResponse> lstActivitySurveyResponse3 = new List<ActivitySurveyResponse>();
                            lstActivitySurveyResponse3 = lstActivitySurveyResponse.Where(x => x.ResponseID == lstActivitySurveyResponse1[cnt].ResponseID && x.QuestionID == objActivityDataCollectionDetails[i].QuestionId).ToList();

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                string subqury = GetBeneficiarySurveyResponseLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);

                                string QSTQry = "SELECT ResponseID,Answer,QuestionID, SurveyID,SyncTaskID FROM TbProjectSurveyResponses where ifnull(IsActive,0)=1 and ";
                                QSTQry += "QuestionID = @QuestionID and ResponseID=@ResponseID  ";
                                QSTQry += subqury;
                                lstActivitySurveyResponse3 = _connection.Query<ActivitySurveyResponse>(QSTQry, new { QuestionID = objActivityDataCollectionDetails[i].QuestionId, ResponseID = lstActivitySurveyResponse1[cnt].ResponseID }).ToList();
                            }

                            if (lstActivitySurveyResponse3 != null && lstActivitySurveyResponse3.Count > 0)
                            {
                                lstActivitySurveyResponse3 = lstActivitySurveyResponse3.GroupBy(x => x.Answer).Select(x => x.First()).ToList();

                                BeneficiaryResponse objBeneficiaryResponse = new BeneficiaryResponse();
                                objBeneficiaryResponse.ResponseID = lstActivitySurveyResponse3[0].ResponseID;
                                objBeneficiaryResponse.Anwer = lstActivitySurveyResponse3.Count;
                                objBeneficiaryResponse.SurveyID = lstActivitySurveyResponse3[0].SurveyID;
                                lstBeneficiaryResponse.Add(objBeneficiaryResponse);
                            }
                        }
                    }
                }
                else if (objActivityDataCollectionDetails[i].QuestionId > 0)
                {
                    query1 = " SELECT COUNT(Answer) AnswerSum,0 AS ResponseCount,max(SurveyID) SurveyID";
                    query1 += " FROM TbProjectSurveyResponses WHERE QuestionID =  @QuestionId AND ifnull(IsActive,0) = 1  ";
                    query1 += GetNonBeneficiarySurveyLogicQuery(lstSurveyPrimeLogic, objActivityDataCollectionDetails[i].SurveyAnswerType);
                    query1 += " GROUP BY QuestionID;";

                    objOutPutCount = _connection.Query<OutPutCount>(query1, new { QuestionId = objActivityDataCollectionDetails[i].QuestionId }).FirstOrDefault();

                    if (objOutPutCount != null)
                    {
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (joinedBeneficiaryQuestionID != null && joinedBeneficiaryQuestionID.Length > 0 && lstBeneficiarySurveyResponseAll != null && lstBeneficiarySurveyResponseAll.Count > 0)
            {
                List<ActivitySurveyResponse> lstBeneficiarySurveyResponse22 = new List<ActivitySurveyResponse>();
                lstBeneficiarySurveyResponse22 = lstBeneficiarySurveyResponseAll.GroupBy(x => x.Answer).Select(x => x.First()).ToList();

                //if (lstBeneficiarySurveyResponse22 != null && lstBeneficiarySurveyResponse22.Count > 0)
                //{
                //    BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                //    objBeneficiaryResponse1.ResponseID = lstBeneficiarySurveyResponse22[0].ResponseID;
                //    objBeneficiaryResponse1.SurveyID = lstBeneficiarySurveyResponse22[0].SurveyID;
                //    objBeneficiaryResponse1.Anwer = lstBeneficiarySurveyResponse22.Count();
                //    lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                //}

                foreach (var itm in lstBeneficiarySurveyResponseAll)
                {
                    BeneficiaryResponse objBeneficiaryResponse1 = new BeneficiaryResponse();
                    objBeneficiaryResponse1.ResponseID = itm.ResponseID;
                    objBeneficiaryResponse1.SurveyID = itm.SurveyID;
                    objBeneficiaryResponse1.Anwer = 1;
                    lstBeneficiaryResponse.Add(objBeneficiaryResponse1);
                }
            }

            if (lstBeneficiaryResponse != null && lstBeneficiaryResponse.Count > 0)
            {
                List<BeneficiaryResponse> lstBeneficiaryResponse3 = lstBeneficiaryResponse.GroupBy(p => new { p.ResponseID }).Select(g => g.First()).ToList();

                if (lstBeneficiaryResponse3 != null && lstBeneficiaryResponse3.Count > 0)
                {
                    for (int g = 0; g < lstBeneficiaryResponse3.Count; g++)
                    {
                        OutPutCount objOutPutCount = new OutPutCount();
                        objOutPutCount.ResponseCount = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID).Count();
                        objOutPutCount.AnswerSum = lstBeneficiaryResponse.Where(x => x.ResponseID == lstBeneficiaryResponse3[g].ResponseID && x.Anwer != null).Sum(x => Convert.ToInt32(x.Anwer));
                        objOutPutCount.SurveyID = lstBeneficiaryResponse[g].SurveyID;
                        lstOutPutCount.Add(objOutPutCount);
                    }
                }
            }

            if (lstOutPutCount != null && lstOutPutCount.Count > 0)
            {
                var mySKUs3 = lstOutPutCount.Select(l => l.SurveyID).Distinct().ToList();
                string joinedSurveyId = string.Join(",", mySKUs3);
                double totsum = 0;
                if (joinedSurveyId != null && joinedSurveyId.Length > 0)
                {
                    string[] spltsurveyId = joinedSurveyId.Split(',');
                    for (int cnt6 = 0; cnt6 < spltsurveyId.Length; cnt6++)
                    {
                        OutPutCount obj1OutPutCount = new OutPutCount();
                        totsum += lstOutPutCount.Where(x => x.SurveyID == Convert.ToDouble(spltsurveyId[cnt6])).Sum(x => x.AnswerSum);
                    }
                }

                result = totsum;/// Convert.ToDouble(SurveyTarget);// (totsum * 100) / Convert.ToDouble(SurveyTarget);
            }

            return result;
        }
        #endregion GetQuantitativeUniqueResponses_forActualValue

        #region GetOutputQuantitativeAverage
        /// <summary>
        /// GetOutputQuantitativeAverage
        /// </summary>
        /// <param name="lstProjectOutputInitialData"></param>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="additionalSurveyQuestionId"></param>
        /// <param name="additionalQuestionType"></param>
        /// <returns></returns>
        public double GetOutputQuantitativeAverage(List<ProjectOutputInitialData> lstProjectOutputInitialData, List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, string SurveyTarget, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false,bool IsSurveyQuestion = true)
        {
            List<ActivitySurveyResponse> lstOutputSurveyResponse = new List<ActivitySurveyResponse>();
            string query = string.Empty;

            double result = 0;

            var myBenRes = lstProjectOutputInitialData.Where(x => x.SyncTaskID == 0).Select(l => l.ResponseID).Distinct().ToList();
            string joinedBeneficiaryResponseIDs = string.Join(",", myBenRes);

            if (lstProjectOutputInitialData != null && lstProjectOutputInitialData.Count > 0)
            {
                var myRes = lstProjectOutputInitialData.Select(l => l.ResponseID).Distinct().ToList();
                string joinedResponseIDs = string.Join(",", myRes);

                if (joinedResponseIDs == "0")
                {
                    var mySKUs = lstProjectOutputInitialData.Select(l => l.SyncTaskID).Distinct().ToList();
                    string joinedSyncTaskIDs = string.Join(",", mySKUs);

                    double sum = 0;
                    double count = 0;

                    var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.QuestionId).Distinct().ToList();
                    string joinedQuestionIds = string.Join(",", mySKUs1);

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE  SyncTaskID in(" + joinedSyncTaskIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        foreach (var itm in lstProjectOutputInitialData)
                        {
                            if (lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.QuestionID == additionalSurveyQuestionId).Count() > 0)
                            {
                                count++;
                                sum = sum + lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.QuestionID == additionalSurveyQuestionId).Select(x => Convert.ToDouble(x.Answer)).First();
                            }
                        }
                    }
                    else
                    {
                        string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE QuestionID  in(" + joinedQuestionIds + ") and  SyncTaskID in(" + joinedSyncTaskIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        foreach (var itm in lstProjectOutputInitialData)
                        {
                            if (lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).Count() > 0)
                            {
                                count++;
                                sum = sum + lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).Select(x => Convert.ToDouble(x.Answer)).First();
                            }
                        }
                    }

                    if (lstOutputSurveyResponse != null && lstOutputSurveyResponse.Count > 0)
                    {
                        //double totalItem = lstOutputSurveyResponse.Count;
                        result = sum / count;
                    }
                }
                else if (joinedResponseIDs != "0" && joinedBeneficiaryResponseIDs == "0")
                {
                    var mySKUs = lstProjectOutputInitialData.Select(l => l.SyncTaskID).Distinct().ToList();
                    string joinedSyncTaskIDs = string.Join(",", mySKUs);
                    List<ProjectOutputBeneficiaryData> lstProjectOutputBeneficiaryData = new List<ProjectOutputBeneficiaryData>();

                    double sum = 0;
                    double count = 0;

                    var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.QuestionId).Distinct().ToList();
                    string joinedQuestionIds = string.Join(",", mySKUs1);

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if(IsSurveyQuestion)
                        {
                            string QSTQry4 = "select ResponseID,ifnull(Answer,0) Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE  SyncTaskID in(" + joinedSyncTaskIDs + ") and ResponseID in(" + joinedResponseIDs + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }
                        else
                        {
                            string QSTQry4 = "select BeneficiaryID as ResponseID,ifnull(Answer,0) Answer,QuestionID FROM TbBeneficiaryRegistrationDetails WHERE BeneficiaryID in(" + joinedResponseIDs + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;
                            double average = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres) && x.QuestionID == additionalSurveyQuestionId).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    average = Math.Round(totSum / lstOutputSurveyResponse1.Count, 2);
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = average });
                                }
                            }
                        }
                    }
                    else
                    {
                        string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE QuestionID  in(" + joinedQuestionIds + ") and  SyncTaskID in(" + joinedSyncTaskIDs + ") and ResponseID in(" + joinedResponseIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;
                            double average = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres)).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }

                    if (lstProjectOutputBeneficiaryData != null && lstProjectOutputBeneficiaryData.Count > 0)
                    {
                        double totalSum = lstProjectOutputBeneficiaryData.Sum(x => Convert.ToDouble(x.TotalSum));
                        double totalItem = lstProjectOutputBeneficiaryData.Count;

                        result = totalSum / totalItem;
                    }
                }
                else
                {
                    var mySKUs = lstProjectOutputInitialData.Select(l => l.SyncTaskID).Distinct().ToList();
                    string joinedSyncTaskIDs = string.Join(",", mySKUs);
                    List<ProjectOutputBeneficiaryData> lstProjectOutputBeneficiaryData = new List<ProjectOutputBeneficiaryData>();

                    var mySurveyId = objActivityDataCollectionDetails.Select(l => l.SurveyId).Distinct().ToList();
                    string joinedSurveyIds = string.Join(",", mySurveyId);

                    var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.BeneficiaryQuestionID).Distinct().ToList();
                    string joinedBeneficiaryQuestionIDs = string.Join(",", mySKUs1);

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (IsSurveyQuestion)
                        {
                            string QSTQry4 = "select ResponseID,ifnull(Answer,0) Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE ResponseID in(" + joinedResponseIDs + ") and SurveyID in(" + joinedSurveyIds + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4, new { QuestionID = additionalSurveyQuestionId }).ToList();
                        } 
                        else
                        {
                            string QSTQry4 = "select BeneficiaryID as ResponseID,ifnull(Answer,0) Answer,QuestionID FROM TbBeneficiaryRegistrationDetails WHERE BeneficiaryID in(" + joinedResponseIDs + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres) && x.QuestionID == additionalSurveyQuestionId).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }
                    else
                    {
                        string QSTQry4 = "SELECT reg.BeneficiaryID AS ResponseID,reg.QuestionID,reg.Answer FROM TbBeneficiaryRegistrationDetails reg  WHERE reg.QuestionID  in(" + joinedBeneficiaryQuestionIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;
                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres)).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }

                    if (lstProjectOutputBeneficiaryData != null && lstProjectOutputBeneficiaryData.Count > 0)
                    {
                        double totalSum = lstProjectOutputBeneficiaryData.Sum(x => Convert.ToDouble(x.TotalSum));
                        double totalItem = lstProjectOutputBeneficiaryData.Count;

                        result = totalSum / totalItem;
                    }
                }
            }

            return result;
        }
        #endregion GetOutputQuantitativeAverage

        #region GetOutputQuantitativeCumulativeSum
        /// <summary>
        /// GetOutputQuantitativeCumulativeSum
        /// </summary>
        /// <param name="lstProjectOutputInitialData"></param>
        /// <param name="objActivityDataCollectionDetails"></param>
        /// <param name="SurveyTarget"></param>
        /// <param name="additionalSurveyQuestionId"></param>
        /// <param name="additionalQuestionType"></param>
        /// <returns></returns>
        public double GetOutputQuantitativeCumulativeSum(List<ProjectOutputInitialData> lstProjectOutputInitialData, List<ActivityDataCollectionDetails> objActivityDataCollectionDetails, string SurveyTarget, int additionalSurveyQuestionId = 0, bool? additionalQuestionType = false, bool IsSurveyQuestion = true)
        {
            List<ActivitySurveyResponse> lstOutputSurveyResponse = new List<ActivitySurveyResponse>();
            string query = string.Empty;

            double result = 0;

            var myBenRes = lstProjectOutputInitialData.Where(x => x.SyncTaskID == 0).Select(l => l.ResponseID).Distinct().ToList();
            string joinedBeneficiaryResponseIDs = string.Join(",", myBenRes);

            if (lstProjectOutputInitialData != null && lstProjectOutputInitialData.Count > 0)
            {
                var myRes = lstProjectOutputInitialData.Select(l => l.ResponseID).Distinct().ToList();
                string joinedResponseIDs = string.Join(",", myRes);

                if (joinedResponseIDs == "0")
                {
                    var mySKUs = lstProjectOutputInitialData.Select(l => l.SyncTaskID).Distinct().ToList();
                    string joinedSyncTaskIDs = string.Join(",", mySKUs);

                    var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.QuestionId).Distinct().ToList();
                    string joinedQuestionIds = string.Join(",", mySKUs1);

                    double sum = 0;

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE   SyncTaskID in(" + joinedSyncTaskIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        foreach (var itm in lstProjectOutputInitialData)
                        {
                            if (lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.QuestionID == additionalSurveyQuestionId).Count() > 0)
                            {
                                sum = sum + lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount && x.QuestionID == additionalSurveyQuestionId).Select(x => Convert.ToDouble(x.Answer)).First();
                            }
                        }
                    }
                    else
                    {
                        string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE QuestionID  in(" + joinedQuestionIds + ") and  SyncTaskID in(" + joinedSyncTaskIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        foreach (var itm in lstProjectOutputInitialData)
                        {
                            if (lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).Count() > 0)
                            {
                                sum = sum + lstOutputSurveyResponse.Where(x => x.SyncTaskID == itm.SyncTaskID && x.SubmissionCount == itm.SubmissionCount).Select(x => Convert.ToDouble(x.Answer)).First();
                            }
                        }
                    }

                    if (lstOutputSurveyResponse != null && lstOutputSurveyResponse.Count > 0)
                    {
                        result = sum;//(sum * 100) / Convert.ToDouble(SurveyTarget);
                    }
                }
                else if (joinedResponseIDs != "0" && joinedBeneficiaryResponseIDs == "0")
                {
                    var mySKUs = lstProjectOutputInitialData.Select(l => l.SyncTaskID).Distinct().ToList();
                    string joinedSyncTaskIDs = string.Join(",", mySKUs);
                    List<ProjectOutputBeneficiaryData> lstProjectOutputBeneficiaryData = new List<ProjectOutputBeneficiaryData>();

                    double sum = 0;
                    double count = 0;

                    var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.QuestionId).Distinct().ToList();
                    string joinedQuestionIds = string.Join(",", mySKUs1);

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (IsSurveyQuestion)
                        {
                            string QSTQry4 = "select ResponseID,ifnull(Answer,0) Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE  SyncTaskID in(" + joinedSyncTaskIDs + ") and ResponseID in(" + joinedResponseIDs + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }
                        else
                        {
                            string QSTQry4 = "select BeneficiaryID as ResponseID,ifnull(Answer,0) Answer,QuestionID FROM TbBeneficiaryRegistrationDetails WHERE BeneficiaryID in(" + joinedResponseIDs + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres) && x.QuestionID == additionalSurveyQuestionId).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }
                    else
                    {
                        string QSTQry4 = "select ResponseID,Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE QuestionID  in(" + joinedQuestionIds + ") and  SyncTaskID in(" + joinedSyncTaskIDs + ") and ResponseID in(" + joinedResponseIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;
                            //double average = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres)).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }

                    if (lstProjectOutputBeneficiaryData != null && lstProjectOutputBeneficiaryData.Count > 0)
                    {
                        double totalSum = lstProjectOutputBeneficiaryData.Sum(x => Convert.ToDouble(x.TotalSum));
                        result = totalSum;
                    }
                }
                else
                {
                    var mySKUs = lstProjectOutputInitialData.Select(l => l.SyncTaskID).Distinct().ToList();
                    string joinedSyncTaskIDs = string.Join(",", mySKUs);
                    List<ProjectOutputBeneficiaryData> lstProjectOutputBeneficiaryData = new List<ProjectOutputBeneficiaryData>();

                    var mySurveyId = objActivityDataCollectionDetails.Select(l => l.SurveyId).Distinct().ToList();
                    string joinedSurveyIds = string.Join(",", mySurveyId);

                    double sum = 0;
                    double count = 0;

                    var mySKUs1 = objActivityDataCollectionDetails.Select(l => l.BeneficiaryQuestionID).Distinct().ToList();
                    string joinedBeneficiaryQuestionIDs = string.Join(",", mySKUs1);

                    if (additionalSurveyQuestionId > 0 && additionalQuestionType.Value == true)
                    {
                        if (IsSurveyQuestion)
                        {
                            string QSTQry4 = "select ResponseID,ifnull(Answer,0) Answer,QuestionID,SurveyID,SubmissionCount,SyncTaskID from TbProjectSurveyResponses  WHERE ResponseID in(" + joinedResponseIDs + ") and SurveyID in(" + joinedSurveyIds + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }
                        else
                        {
                            string QSTQry4 = "select BeneficiaryID as ResponseID,ifnull(Answer,0) Answer,QuestionID FROM TbBeneficiaryRegistrationDetails WHERE BeneficiaryID in(" + joinedResponseIDs + ");";
                            lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();
                        }

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres) && x.QuestionID == additionalSurveyQuestionId).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }
                    else
                    {
                        string QSTQry4 = "SELECT reg.BeneficiaryID AS ResponseID,reg.QuestionID,reg.Answer FROM TbBeneficiaryRegistrationDetails reg  WHERE reg.QuestionID  in(" + joinedBeneficiaryQuestionIDs + ");";
                        lstOutputSurveyResponse = _connection.Query<ActivitySurveyResponse>(QSTQry4).ToList();

                        string[] strSplit = joinedResponseIDs.Split(",");

                        if (strSplit != null && strSplit.Length > 0)
                        {
                            double totSum = 0;
                            //double average = 0;

                            foreach (var itmres in strSplit)
                            {
                                totSum = 0;
                                List<ActivitySurveyResponse> lstOutputSurveyResponse1 = new List<ActivitySurveyResponse>();
                                lstOutputSurveyResponse1 = lstOutputSurveyResponse.Where(x => x.ResponseID == Convert.ToInt32(itmres)).ToList();

                                if (lstOutputSurveyResponse1 != null && lstOutputSurveyResponse1.Count > 0)
                                {
                                    totSum = lstOutputSurveyResponse1.Sum(x => Convert.ToDouble(x.Answer));
                                    lstProjectOutputBeneficiaryData.Add(new ProjectOutputBeneficiaryData { ResponseID = Convert.ToInt32(itmres), TotalSum = totSum });
                                }
                            }
                        }
                    }

                    if (lstProjectOutputBeneficiaryData != null && lstProjectOutputBeneficiaryData.Count > 0)
                    {
                        double totalSum = lstProjectOutputBeneficiaryData.Sum(x => Convert.ToDouble(x.TotalSum));
                        result = totalSum;
                    }
                }
            }

            return result;
        }
        #endregion GetOutputQuantitativeCumulativeSum


        #region GetProjectActivityActualValues
        /// <summary>
        /// GetProjectActivityActualValues
        /// </summary>
        /// <param name="ActivityId"></param>
        /// <returns></returns>
        public double GetProjectActivityPhysicalActualValues(int ActivityId)
        {
            ProjectActivityActualValue objProjectActivityActualValue = new ProjectActivityActualValue();
            List<ProjectActivity> objProjectActivityList = new List<ProjectActivity>();
            List<ProjectActivity> objProjectActivityListNew = new List<ProjectActivity>();
            double actualValue = 0;

            try
            {
                using (_connection = Utils.Database.GetDBConnection())
                {
                    string query = @"select ProjectActivity.ActivityId,ProjectActivity.ProjectId,ParentActivityId,ProjectActivity.ActivityName,ProjectActivity.Description,ProjectActivity.StartDate,ProjectActivity.EndDate
                                ,ProjectActivity.WeightagePercentage,ProjectActivity.ActivityType,ProjectActivity.SurveyId,ProjectActivity.SurveySectionId,BeneficiaryTypeQuestionID,
                                ProjectActivity.SurveyQuestionId,ProjectActivity.SurveyResponseId,ProjectActivity.SurveyLogic,ProjectActivity.SurveyTarget,ProjectActivity.IsPaymentLinked,ProjectActivity.PaymentLinkedBudget,
                                ProjectActivity.WorkflowId,ProjectActivity.FinanceWorkflowId,ProjectActivity.Periodicity,ProjectActivity.IsDeleted,ProjectActivity.CreatedDate,ProjectActivity.UpdatedDate,ProjectActivity.CreatedBy,ProjectActivity.UpdatedBy
                                ,TbPeriodicity.PeriodicityType as ReportingFrequencyName,ProjectActivity.Progress,@multS as multS,ProjectSurvey.BeneficiaryTypeID as BeneficiaryTypeID,
                                (SELECT COUNT(*) FROM TbProjectActivity WHERE ParentActivityId = ProjectActivity.ActivityId) SubActivityCount  ,
                                (SELECT SUM(WeightagePercentage) FROM  TbProjectActivity WHERE ParentActivityId = ProjectActivity.ActivityId AND IFNULL(IsDeleted,0) = 0) SubActivityTotalWeightage,ProjectActivity.AdditionalQuestionId as AdditionalSurveyQuestionId 
                                ,ProjectActivity.AdditionalQuestionType, ProjectActivity.AdditionalQuestionId, ifnull(ProjectActivity.AdditionalSectionId,0) as AdditionalSectionId, ProjectActivity.AutoGeneratedActivityId, ProjectActivity.IsSubActivitiesAvailable, ProjectActivity.UnitOfMeasure,
                                IFNULL(ProjectActivity.FinancialActivityType,'') AS FinancialActivityType,ifnull(ProjectActivity.FinancialSurveyLogic,0) as FinancialSurveyLogic,ifnull(ProjectActivity.FinancialSurveyTarget,0) as FinancialSurveyTarget,ifnull(ProjectActivity.FinancialAdditionalSurveyId,0) as FinancialAdditionalSurveyId,
                                ifnull(ProjectActivity.FinancialAdditionalSectionId,0) as FinancialAdditionalSectionId,ifnull(ProjectActivity.FinancialAdditionalQuestionId,0) as FinancialAdditionalQuestionId,ifnull(ProjectActivity.FinancialAdditionalQuestionType,0) as FinancialAdditionalQuestionType,ifnull(ProjectActivity.UnitCost,0) as UnitCost   
                                from TbProjectActivity ProjectActivity left join TbProjectSurvey ProjectSurvey on ProjectSurvey.SurveyID = ProjectActivity.SurveyId left join TbPeriodicity TbPeriodicity 
                                on TbPeriodicity.PeriodicityId = ProjectActivity.Periodicity where ProjectActivity.IsDeleted = @isdeleted and ProjectActivity.ActivityId = @ActivityId  Order By ParentActivityId asc,ProjectActivity.ActivityId Desc;";

                    objProjectActivityList = _connection.Query<ProjectActivity>(query, new { isdeleted = 0, ActivityId = ActivityId, multS = 0 }).ToList();

                    foreach (ProjectActivity actItem in objProjectActivityList)
                    {
                        if (actItem.ActivityType == "Quantitative")
                        {
                            if (actItem.SubActivityCount == 0)
                            {
                                actualValue = getData(actItem.ActivityId, actItem.SurveyLogic, actItem.SurveyTarget, Convert.ToInt32(actItem.AdditionalSectionId), actItem.AdditionalSurveyQuestionId, actItem.AdditionalQuestionType, 1);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return actualValue;
        }
        #endregion GetProjectActivityActualValues

        #endregion TogetActualValue
    }
}


